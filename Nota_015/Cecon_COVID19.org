#+TITLE: Dados: O PIB da pandemia e cenários para 2021
#+DATE: Janeiro de 2021
#+LATEX_CLASS: SelfArx
#+SETUPFILE: ../manuscript.setup
#+INCLUDE: Infos.org
#+PROPERTY: header-args python :results output drawer :eval never-export :session Cecon

* Initial setup :noexport:ignore:
#+LATEX:\flushbottom % Makes all text pages the same height
#+LATEX:\maketitle % Print the title and abstract box
#+LATEX:\thispagestyle{empty} % Removes page numbering from the first page
#+LATEX: \onecolumn

#+BEGIN_SRC python
import pandas as pd
import numpy as np
from datetime import datetime as dt
from datetime import timedelta

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from matplotlib.ticker import FuncFormatter

import seaborn as sns
import pandas_datareader.data as web
import requests
import json

import country_converter as coco
cc = coco.CountryConverter()

import matplotlib.image as image

logo = "./figs/Cecon_Logo.png"
logo = image.imread(logo)
corona_sp = '2020-03-24'
corona_sp_txt = "Início isolamento social em SP"

corona_60 = '2020-03-18'
corona_60_txt = "Mais de 60 casos de COVID-19"

base = "2014-12-01"

def line_format(label):
    """
    Convert time label to the format of pandas line plot
    """
    month = label.month_name()[:3]
    if month == 'Jan':
        month += f'\n{label.year}'
    return month
#ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))

def interpolator(df):
    for col in df:
        df[col] = pd.to_numeric(df[col], errors='coerce')
        df = df.resample('D').interpolate(method='time')

    return df

def line_format(label):
    """
    Convert time label to the format of pandas line plot
    """
    month = label.month_name()[:3]
    if month == 'Jan':
        month += f'\n{label.year}'
    return month

def rebase(df, base=base):
    for col in df:
        df[col] = df[col].apply(lambda x: (100*x)/df[col][base])
    return df


def consulta_bc(codigo_bcb, nome = ["Nome da série"]):
  url = 'http://api.bcb.gov.br/dados/serie/bcdata.sgs.{}/dados?formato=json'.format(codigo_bcb)
  df = pd.read_json(url)
  df['data'] = pd.to_datetime(df['data'], dayfirst=True)
  df.set_index('data', inplace=True)
  df.index.name = ''
  df.columns = nome
  return df

#+END_SRC

#+RESULTS:
:results:
:end:

* Atividade

** IBCBr

#+BEGIN_SRC python :results graphics file :file ./figs/Antecedente/IBCBr.png
start_year = "2018-01-01"

df = consulta_bc(24364, ["IBCBr (%YoY)"])
df.index.name = ""
# df = rebase(df)
df = df.pct_change(12)
df = (1 + df / 100).rolling(window=12).agg(lambda x: x.prod()) - 1
df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"IBCBr Dessazonalizado",
    ax=ax,
    lw=2.5,
    color="black",
)
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label=corona_sp_txt)
ax.axhline(y=0, color="gray", ls="-")
ax.set_yticklabels(["{:,.2%}".format(x) for x in ax.get_yticks()])
ax.legend()
# ax.set_ylabel("Taxa de crescimento YoY (%)")
# ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()

fig.savefig(
    "./figs/Antecedente/" + "IBCBr" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/Antecedente/IBCBr.png]]


** Baixando dados e criando nomes :ignore:
#+BEGIN_SRC sh :dir ./raw/ContasNacionais/ :exports none :eval no
wget -N --backups=1 ftp://ftp.ibge.gov.br/Contas_Nacionais/Contas_Nacionais_Trimestrais/Tabelas_Completas/Tab_Compl_CNT.zip
unzip -o Tab_Compl_CNT.zip
mv *.xls Tab_Compl_CNT.xlsx
#+END_SRC

#+RESULTS:
:results:

--2021-01-06 17:25:59--  ftp://ftp.ibge.gov.br/Contas_Nacionais/Contas_Nacionais_Trimestrais/Tabelas_Completas/Tab_Compl_CNT.zip
“.listing”
Resolvendo ftp.ibge.gov.br (ftp.ibge.gov.br)... 170.84.40.44
Conectando-se a ftp.ibge.gov.br (ftp.ibge.gov.br)|170.84.40.44|:21... conectado.
Acessando como anonymous ... Acesso autorizado!
SYST ... feito.    ==> PWD ... feito.
TYPE I ... feito.  ==> CWD (1) /Contas_Nacionais/Contas_Nacionais_Trimestrais/Tabelas_Completas ... feito.
PASV ... feito.    ==> LIST ... feito.
Failed to rename .listing to .listing.1: (2) Arquivo ou diretório não encontrado
]       0  --.-KB/s               .listing                [ <=>                ]     194  --.-KB/s    em 0s

2021-01-06 17:26:00 (577 KB/s) - “.listing” salvo [194]

Removeu “.listing”.
O arquivo remoto não é mais novo que o local “Tab_Compl_CNT.zip” -- ignorando.
Archive:  Tab_Compl_CNT.zip
  inflating: Tab_Compl_CNT.xls
:end:

#+BEGIN_SRC python
Colunas = [
    "Agropecuaria",
    "Industria Extrativa",
    "Industria de Transformacao",
    "Eletricidade e agua",
    "Construcao",
    "Total Industria",
    "Comercio",
    "Transporte, armazenagem e correio",
    "Informacao e comunicacao",
    "Atividades Financeiras",
    "Atividades Imobiliarias",
    "Outras atividades",
    "ADM, defesa, etc",
    "Total Servicos",
    "VA",
    "PIB",
    "Consumo das Familias",
    "Consumo do Governo",
    "FBCF",
    "Exportacao",
    "Importacao"
]

Agropecuaria = ['Agropecuaria']

Industria = [
    "Industria Extrativa",
    "Industria de Transformacao",
    "Eletricidade e agua",
    "Construcao",
    "Total Industria"
]

Servicos = [
    "Comercio",
    "Transporte, armazenagem e correio",
    "Informacao e comunicacao",
    "Atividades Financeiras",
    "Atividades Imobiliarias",
    "Outras atividades",
    "ADM, defesa, etc",
    "Total Servicos",
]

Demanda = [
    "Consumo das Familias",
    "Consumo do Governo",
    "FBCF",
    "Exportacao",
    "Importacao"
]

Oferta = [
    'Agropecuaria',
    "Total Industria",
    "Total Servicos",
]

df = pd.read_excel('./raw/ContasNacionais/Tab_Compl_CNT.xlsx', header=3, sheet_name='Val encad preços 95 com ajuste', index_col=0)
df.index = df.index.str.replace('.', 'Q').str.replace('IV', '4').str.replace('III', '3').str.replace('II', '2').str.replace('I', '1')
df.index = pd.PeriodIndex(df.index, freq='Q')
df.columns = Colunas
df["Importacao"] = -df["Importacao"]
#+END_SRC

#+RESULTS:
:results:
:end:

** Trimestre Contra trimestre imediatamente anterior

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/PIB.png
fig = plt.figure(figsize=(9,4))
ax = plt.axes()
ax2 = plt.axes([0.15,0.6,0.2,0.2])

suptitle = 'Taxa de crescimento'
title = 'Trimestre contra trimestre anterior'


df['PIB'].pct_change()["2019":].plot(ax=ax, color='darkblue', kind='line')
ax.axhline(y=0, ls='--', color='black')

plt.suptitle(suptitle, color='black', weight = 'bold')
ax.set_title(title, color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
# ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

fig.savefig('./figs/PIB/PIB.png', dpi = 300,)
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/PIB.png]]

** Trimestre Contra mesmo trimestre do ano anterior

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/PIB_YoY.png
fig = plt.figure(figsize=(9,4))
ax = plt.axes()
ax2 = plt.axes([0.15,0.6,0.2,0.2])

suptitle = 'Taxa de crescimento'
title = 'Trimestre contra mesmo trimestre do ano anterior'


df['PIB'].pct_change(4)["2019":].plot(ax=ax, color='darkblue', kind='line')
ax.axhline(y=0, ls='--', color='black')

plt.suptitle(suptitle, color='black', weight = 'bold')
ax.set_title(title, color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
# ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

fig.savefig('./figs/PIB/PIB_YoY.png', dpi=300)
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/PIB_YoY.png]]

** Agropecuária

#+BEGIN_SRC python :results graphics file :file ./figs/PIB/Agropecuaria.png
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Agropecuaria].pct_change().tail(4).plot(kind='bar', ax=ax, color='darkblue')

plt.suptitle('Agricultura', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)

ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

fig.savefig(
    './figs/PIB/Agropecuaria.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Agropecuaria.png]]

** Indústria

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/Industria.png
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Industria].pct_change().tail(4).plot(kind='bar', ax=ax)

plt.suptitle('Indústria', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)

ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
fig.savefig(
    './figs/PIB/Industria.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Industria.png]]


** Serviços

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/Servicos.png
fig, ax = plt.subplots(figsize=(8,5))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Servicos].pct_change().tail(4).plot(kind='bar', ax=ax)
lgd = ax.legend(
    loc='center left',
    bbox_to_anchor=(1, 0.5)
)


plt.suptitle('Serviços', color='black', weight = 'bold')

ax.axhline(y=0, color='gray', linestyle='--', lw=2)

ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
fig.savefig(
    './figs/PIB/Servicos.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Servicos.png]]

** Demanda

#+BEGIN_SRC python   :results graphics file :file ./figs/PIB/Demanda.png
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Demanda + ['PIB']].pct_change().tail(4).plot(kind='bar', ax=ax)

plt.suptitle('Demanda', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
fig.savefig(
    './figs/PIB/Demanda.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Demanda.png]]

** Oferta


#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/Oferta.png
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Oferta + ['PIB']].pct_change().tail(4).plot(kind='bar', ax=ax)

plt.suptitle('Oferta', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)
#ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
plt.close()
fig.savefig(
    './figs/PIB/Oferta.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Oferta.png]]


** Contribuição para variação: Demanda

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/Contrib_Demanda.png
fig, ax = plt.subplots(figsize=(8,5))
ax2 = fig.add_axes([0.15,0.7,0.2,0.2])

df[Demanda].diff().apply(lambda x: x/(df["PIB"].shift())).tail(4).plot(
    kind = 'bar',
    stacked = True,
    ax = ax,
    color = (
        "tomato",
        "darkred",
        "darkslateblue",
        "tan",
        "khaki"
    ),
    width = 0.75,
    edgecolor='black'
)
plt.suptitle('Demanda', color='black', weight = 'bold')
ax.axhline(y=0, color='black', linestyle='-', lw=2)
#ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Contribuição para variação do PIB', color='black')

ax.text(0.95, -0.125, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.125, 'Atualizado em {}. Último dado disponível: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
fig.savefig(
    './figs/PIB/Contrib_Demanda.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Contrib_Demanda.png]]

** Contribuição para variação: Oferta

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/Contrib_Oferta.png
fig, ax = plt.subplots(1,1,figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


#df["PIB"].pct_change().tail(12).plot(ax = ax, kind = 'line', legend = True, color = 'black')
df[Oferta].diff().apply(lambda x: x/(df["VA"].shift())).tail(4).plot(
    kind = 'bar',
    stacked = True,
    ax = ax,
    color = (
        "green",
    #    "darkred",
        "darkslateblue",
        "tan",
    #    "khaki"
    ),
    cmap="Set1",
    width = 0.75,
    edgecolor='black'
)

plt.suptitle('Oferta', color='black', weight = 'bold')
ax.axhline(y=0, color='black', linestyle='-', lw=2)
#ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Contribuição para variação do valor adicionado', color='black')

ax.text(0.95, -0.125, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.125, 'Atualizado em {}. Último dado disponível: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
fig.savefig(
    './figs/PIB/Contrib_Oferta.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Contrib_Oferta.png]]


** Contribuição para variação: Serviços

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/Contrib_Servicos.png
fig, ax = plt.subplots(1, 1, figsize=(9, 4))
ax2 = fig.add_axes([0.15, 0.6, 0.2, 0.2])


# df["PIB"].pct_change().tail(12).plot(ax = ax, kind = 'line', legend = True, color = 'black')
df[Servicos].drop(["Total Servicos"], axis="columns").diff().apply(
    lambda x: x / (df["Total Servicos"].shift())
).tail(4).plot(
    kind="bar",
    stacked=True,
    ax=ax,
    color=(
        "green",
        "darkred",
        "darkslateblue",
        "tan",
        "khaki",
        "gray",
        "orange",
    ),
    cmap="Set1",
    width=0.75,
    edgecolor="black",
)

plt.suptitle("Oferta", color="black", weight="bold")
ax.axhline(y=0, color="black", linestyle="-", lw=2)
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))


ax.set_title("Contribuição para variação do valor adicionado", color="black")

ax.text(
    0.95,
    -0.125,
    "Fonte: IBGE",
    verticalalignment="bottom",
    horizontalalignment="right",
    transform=ax.transAxes,
    color="black",
    fontsize=10,
)

ax.text(
    0.6,
    -0.125,
    "Atualizado em {}. Último dado disponível: {}".format(
        dt.now().strftime("%d/%m/%Y"), df.index[-1]
    ),
    verticalalignment="bottom",
    horizontalalignment="right",
    transform=ax.transAxes,
    color="black",
    fontsize=10,
)

sns.despine()
ax.tick_params(axis="x", colors="black")
ax.tick_params(axis="y", colors="black")
ax.yaxis.label.set_color("black")
ax.xaxis.label.set_color("black")
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: "{:.1%}".format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")
fig.savefig(
    "./figs/PIB/Contrib_Servicos.png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Contrib_Servicos.png]]

* Crédito (saldo) :noexport:

#+BEGIN_SRC python  :tangle ./codes/Credito.py :eval no

import sys

sys.path.insert(1, './codes/')

from setup import *

start_year = "2019-01-01"

file_path = './raw/LCA/'
image_path = './figs/Credito/'
file_name = 'Indicadores_de_Credito_Bacen'
#+END_SRC

#+RESULTS:
:results:
    return super().drop(
  File "/home/gpetrini/.local/lib/python3.8/site-packages/pandas/core/generic.py", line 3887, in drop
    obj = obj._drop_axis(labels, axis, level=level, errors=errors)
  File "/home/gpetrini/.local/lib/python3.8/site-packages/pandas/core/generic.py", line 3921, in _drop_axis
    new_axis = axis.drop(labels, errors=errors)
  File "/home/gpetrini/.local/lib/python3.8/site-packages/pandas/core/indexes/base.py", line 5282, in drop
    raise KeyError(f"{labels[mask]} not found in axis")
KeyError: "['Total Servicos'] not found in axis"
>>>
:end:


*** Pessoa jurídica
     
#+BEGIN_SRC python  :tangle ./codes/Credito.py :eval no
sheet = "SaldoPJ"
titulo = "Saldo Pessoa jurídica"
porcentagem=False
unidade="Milhões"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,Z,AM", 
)[0:]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    lw=2, 
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.2%}'.format(x/100) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.close()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +   '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
    raise KeyError(f"{labels[mask]} not found in axis")
KeyError: "['Total Servicos'] not found in axis"
>>>
:end:


#+BEGIN_SRC python  :tangle ./codes/Credito.py :eval no
sheet = "SaldoPJ"
titulo = "Saldo Pessoa jurídica"
porcentagem=False
unidade="Milhões"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,Z,AM", 
)[0:]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.pct_change(12)[start_year:].plot(
    title = titulo,
    ax = ax,
    lw=2, 
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.close()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +   '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

*** Pessoa física

#+BEGIN_SRC python  :tangle ./codes/Credito.py :eval no
sheet = "SaldoPF"
titulo = "Saldo Pessoa física"
porcentagem=False
unidade="Milhões"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,W,AJ", 
)[0:]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    lw=2, 
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.2%}'.format(x/100) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.close()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +   '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

#+BEGIN_SRC python  :tangle ./codes/Credito.py :eval no
sheet = "SaldoPF_%PIB"
titulo = "Saldo Pessoa física\nem % PIB"
porcentagem=True
unidade="PIB"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,W,AJ", 
)[0:]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    lw=2, 
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.2%}'.format(x/100) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.close()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +   '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

*** Crédito ampliado

#+BEGIN_SRC python  :tangle ./codes/Credito.py :eval no
sheet = "SaldoCréditoAmpliado"
titulo = "Saldo Crédito Ampliado"
porcentagem=True
unidade="do Total"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,N,V,AJ", 
)[0:]
df.columns = [
    "Setor não financeiro",
    "Governo Geral",
    "Empresas e Famílias"
]
df.index = pd.date_range( # Check for NaN
    start = '2013-01-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
df["Total"] = df.sum(axis=1)
df = df.apply(lambda x: x/df["Total"]).drop(["Total"], axis='columns')

df.index.name = ''


fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    kind='bar', stacked=True, edgecolor='black',
    lw=2, 
)
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
#ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.close()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

#+BEGIN_SRC python  :tangle ./codes/Credito.py :eval no
sheet = "SaldoCréditoAmpliado"
titulo = "Saldo Crédito Ampliado"
porcentagem=False
unidade="Milhões"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,N,V,AJ", 
)[0:]
df.columns = [
    "Setor não financeiro",
    "Governo Geral",
    "Empresas e Famílias"
]
df.index = pd.date_range( # Check for NaN
    start = '2013-01-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
#df["Total"] = df.sum(axis=1)
#df = df.apply(lambda x: x/df["Total"]).drop(["Total"], axis='columns')

df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    #kind='bar', stacked=True, edgecolor='black',
    lw=2, 
)
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.close()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +   '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


#+BEGIN_SRC python  :tangle ./codes/Credito.py :eval no
sheet = "SaldoCréditoAmpliado_%PIB"
titulo = "Saldo Crédito Ampliado"
porcentagem=True
unidade="PIB"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,N,V,AJ", 
)[0:]
df.columns = [
    "Setor não financeiro",
    "Governo Geral",
    "Empresas e Famílias"
]
df.index = pd.date_range( # Check for NaN
    start = '2013-01-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
#df["Total"] = df.sum(axis=1)
#df = df.apply(lambda x: x/df["Total"]).drop(["Total"], axis='columns')

df.index.name = ''

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    #kind='bar', stacked=True, edgecolor='black',
    lw=2, 
)
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
#ax.axvline(x = corona, color='black', ls='--', lw=1, label='Mais de 60 casos de COVID19')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.0%}'.format(x/100) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.close()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +   '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

*** Crédito direcionado


#+BEGIN_SRC python  :tangle ./codes/Credito.py :eval no
sheet = "SaldoDirecionado"
titulo = "Saldo Crédito Direcionado"
porcentagem=False
unidade="Milhões"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,D,G,,K,L", 
)[0:]
df.columns = [
    "Rural",
    "Financiamento Imobiliário",
    "BNDES",
    "Outros"
]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]

df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    #kind='bar', stacked=True, edgecolor='black',
    lw=2, 
)
#ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.2f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.close()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

#+BEGIN_SRC python  :tangle ./codes/Credito.py :eval no
sheet = "SaldoDirecionado"
titulo = "Saldo Crédito Direcionado"
porcentagem=True
unidade="do Total"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,D,G,,K,L", 
)[0:]
df.columns = [
    "Rural",
    "Financiamento Imobiliário",
    "BNDES",
    "Outros"
]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
df["Total"] = df.sum(axis=1)
df = df.apply(lambda x: x/df["Total"]).drop(["Total"], axis='columns')


df.index.name = ''

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    kind='bar', stacked=True, edgecolor='black',
    lw=2, 
)
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
#ax.axvline(x = corona, color='black', ls='--', lw=1, label='Mais de 60 casos de COVID19')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.2f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.close()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

#+BEGIN_SRC python  :tangle ./codes/Credito.py :eval no
sheet = "SaldoDirecionado_%PIB"
titulo = "Saldo Crédito Direcionado"
porcentagem=True
unidade="PIB"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,D,G,,K,L", 
)[0:]
df.columns = [
    "Rural",
    "Financiamento Imobiliário",
    "BNDES",
    "Outros"
]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
# df["Total"] = df.sum(axis=1)
# df = df.apply(lambda x: x/df["Total"]).drop(["Total"], axis='columns')


df.index.name = ''

df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    #kind='bar', stacked=True, edgecolor='black',
    lw=2, 
)
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.2f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.0%}'.format(x/100) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.close()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:



* Índices de atividade setoriais :noexport:

#+BEGIN_SRC python  :tangle ./codes/setoriais.py :eval no

import sys

sys.path.insert(1, './codes/')

from setup import *


file_path = './raw/LCA/'
image_path = './figs/Setoriais/'
start_year = "2019-01-01"
base = "2014-12-01"
#+END_SRC

#+RESULTS:
:results:
:end:


** Pesquisa Industrial Mensal (PIM)

#+BEGIN_SRC python  :tangle ./codes/setoriais.py :eval no
file_name = "PIM_IBGE"
df = pd.read_excel(
    file_path + file_name + ".xlsx",
    sheet_name = "Seções Ativi Dessaz",
    skiprows = 11,
    usecols = "A:D",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
for col in df:
    df[col] = df[col].apply(lambda x: (100*x)/df[col][base])

df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = f"Pesquisa Industrial Mensal (PIM)\nSeções de atividades desazonalizadas\n{base} = 100",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.close()

fig.savefig(
    image_path + file_name + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


** Pesquisa Mensal do Comércio (PMC)
   
#+BEGIN_SRC python  :tangle ./codes/setoriais.py :eval no
file_name = "PMC_IBGE"
df = pd.read_excel(
    file_path + file_name + ".xlsx",
    sheet_name = "Volume Vendas Dessaz",
    skiprows = 11,
    usecols = "A:D,F,G,J:P",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
for col in df:
    df[col] = df[col].apply(lambda x: (100*x)/df[col][base])

df = df[start_year:]
df = interpolator(df)

df.columns = [
    "Comércio Varejista Restrito",
    "Combustíveis e Lubiricantes",
    "Hipermercados, Supermercados, Prod. Alimentícios, Bebidas e Fumo",
    "Tecidos, Vestuário e Calçados",
    "Móveis e Eletrodomésticos",
    "Artigos Farmacêuticos, Médicos, Ortopédicos, de Perfumaria e Cosméticos",
    "Livros, Jornais, Revistas e Papelaria",
    "Equipamentos e Materiais para Escritório, Informática e Comunicação",
    "Outros Artigos de Uso Pessoal e Doméstico",
    "Veículos, Motos, Partes e Peças",
    "Material de Construção",
    "Comércio Varejista Ampliado",
]

UsoPessoalDomestico = [
    "Artigos Farmacêuticos, Médicos, Ortopédicos, de Perfumaria e Cosméticos",
    "Livros, Jornais, Revistas e Papelaria",
    "Equipamentos e Materiais para Escritório, Informática e Comunicação",
    "Outros Artigos de Uso Pessoal e Doméstico",
]


fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = f"Pesquisa Mensal do Comércio (PMC)\nVolume de Vendas Dessazonalizado\n{base} = 100",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.close()

fig.savefig(
    image_path + file_name + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


** Pesquisa Mensal de Serviços (PMS)

#+BEGIN_SRC python  :tangle ./codes/setoriais.py :eval no
file_name = "PMS_IBGE"
df = pd.read_excel(
    file_path + file_name + ".xlsx",
    sheet_name = "Volume dessaz",
    skiprows = 11,
    usecols = "A:C,F,K,N,S",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''

for col in df:
    df[col] = df[col].apply(lambda x: (100*x)/df[col][base])

df = df[start_year:]
df = interpolator(df)
df.columns = [
    "Total Geral",
    "Serviços prestados às Famílias",
    "Serviços de informação e comunicação",
    "Serviços Profissionais, Administrativos e Complementares",
    "Transportes, Serviços auxiliares aos transportes e Correio",
    "Outros serviços"
]

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = f"Pesquisa Mensal de Serviços (PMS)\nÍndice de Volume de serviços dessazonalizado\n{base} = 100",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.close()

fig.savefig(
    image_path + file_name + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

* Emprego :noexport:

#+BEGIN_SRC python   :tangle ./codes/pnad.py :eval no

import sys

sys.path.insert(1, './codes/')

from setup import *


file_path = './raw/LCA/PNAD_Continua.xlsx'
imag#+PROPERTY: header-args R :results output drawer replace :exports results :eval never-export :session Cecon
e_path = './figs/Emprego/'
start_year = "2019-01-01"
#+END_SRC

#+RESULTS:
:results:
:end:


** Taxa de desocupação

#+BEGIN_SRC python   :tangle ./codes/pnad.py :eval no
var = "Taxa de desocupação"
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Dessaz",
    skiprows = 11,
    usecols = "A,F",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''


df = df[start_year:]
df.columns = [
    var
]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Taxa de Desocupação\n(% da Força de Trabalho)",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.close()

fig.savefig(
    image_path + file_path.strip("/")[-1] + var.replace(" ", "_") + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


** Massa de renda

#+BEGIN_SRC python   :tangle ./codes/pnad.py :eval no
var = "Massa de renda real efetiva"
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Dessaz",
    skiprows = 11,
    usecols = "A,R",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''


df = df[start_year:]
df.columns = [
    var
]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Massa de renda real efetiva",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.close()

fig.savefig(
    image_path + file_path.strip("/")[-1] + var.replace(" ", "_") + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


** Desalentados e subocupados

#+BEGIN_SRC python   :tangle ./codes/pnad.py :eval no
var = "Desalentados_Subocupados"
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Dessaz",
    skiprows = 11,
    usecols = "A,D,S,T",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
df.columns = [
    "Força de trabalho",
    "Subocupados",
    "Desalentados"
]
df = df.apply(pd.to_numeric, errors='coerce')
df["Taxa de desalentados"] = df["Desalentados"]/df["Força de trabalho"]
df["Taxa de Subocupados por \ninsuficiência de horas trabalhadas"] = df["Subocupados"]/df["Força de trabalho"]
df = df[start_year:]
df = df[["Taxa de desalentados", "Taxa de Subocupados por \ninsuficiência de horas trabalhadas"]]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Taxa de desalentados e subocupatos\n(em % da força de trabalho)",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.close()

fig.savefig(
    image_path + file_path.strip("/")[-1] + var.replace(" ", "_") + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

** Rendimento habitual médio por atividade


#+BEGIN_SRC python   :tangle ./codes/pnad.py :eval no
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Mensal RHM Setor Real",
    skiprows = 11,
    usecols = "A:K",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Rendimento habitual médio por atividade",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.close()

fig.savefig(
    image_path + file_path.strip("/")[-1] + "RHM_Setor" + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

** População ocupada por atividade

#+BEGIN_SRC python   :tangle ./codes/pnad.py :eval no
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Mensal PO Setor",
    skiprows = 11,
    usecols = "A:K",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
df = df[start_year:]


fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "População ocupada por atividade",
    ax = ax,
    lw = 1.5,
    edgecolor = 'black',
    kind = 'bar', stacked = True
)



ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.close()

fig.savefig(
    image_path + file_path.strip("/")[-1] + "PO_Atividade" + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:



** Taxa de ocupação

#+BEGIN_SRC python   :tangle ./codes/pnad.py :eval no
var = "Taxa de ocupação"
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Dessaz",
    skiprows = 11,
    usecols = "A,D,E",
    parse_date = True,
    index_col = [0]
)

df.index.name = ''
df = df[start_year:]
df.columns = ["Força de trabalho", "População ocupada"]

df[var] = df["População ocupada"]/df["Força de trabalho"]
df = df[[var]]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Taxa de Ocupação\n(% da Força de Trabalho)",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label=corona_sp_txt)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.close()

fig.savefig(
    image_path + file_path.strip("/")[-1] + var.replace(" ", "_") + "_" + "linha" +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


#+BEGIN_SRC python   :tangle ./codes/pnad.py :eval no
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Mensal PO Setor",
    skiprows = 11,
    usecols = "A:L",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
df = df[start_year:]
for col in df:
    df[col] = df[col].apply(lambda x: (100*x)/df["Total"])

df.drop(["Total"], axis='columns', inplace=True)
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "População ocupada por atividade\n(% Força de trabalho)",
    ax = ax,
    lw = 1.5,
)

ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label=corona_sp_txt)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.close()

fig.savefig(
    image_path + file_path.strip("/")[-1] + "PO_Atividade" + "_" + "linha" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


* Dado de alta frequência Bloomberg adaptado ao COVID-19 ([[https://www.bloomberg.com/news/articles/2020-11-13/alternative-data-show-activity-crashes-as-virus-resurges-chart][Link]]) :noexport:

- Não é público
- Substituiria CLIs

* PNAD-COVID
** Pendências :noexport:
*** TODO Incluir logos
** Home office - Por sexo e cor




[[./figs/PNAD_COVID/home_sexo_cor.png]]

** Home office - Por Cor e Escolaridade
[[./figs/PNAD_COVID/home_edu_cor.png]]
** Home office - Por Cor e Idade
[[./figs/PNAD_COVID/home_sexo_idade.png]]

** Home office - Por Trabalho
[[./figs/PNAD_COVID/home_emprego.png]]

** Home office - Por faixa salarial e cor
[[./figs/PNAD_COVID/home_renda.png]]
** Auxilio - Faixa Salarial
[[./figs/PNAD_COVID/auxilio_renda.png]]
** Auxilio - Por tipo do domicilio
[[./figs/PNAD_COVID/auxilio_domicilio.png]]
** Auxilio - Sexo e Cor
[[./figs/PNAD_COVID/auxilio_cor_sexo.png]]

* PNADc :noexport:

* Relatório do Tesouro :noexport:

* IPEA e importância do Auxílio Emergencial :noexport:

* Base de dados FMI (Fiscal Monitor e WEO) :noexport:
