#+TITLE: Dados: O PIB da pandemia e cenários para 2021
#+DATE: Janeiro de 2021
#+LATEX_CLASS: SelfArx
#+SETUPFILE: ../manuscript.setup
#+INCLUDE: Infos.org
#+PROPERTY: header-args python :results output drawer :eval never-export :session Cecon
#+LATEX:\flushbottom % Makes all text pages the same height
#+LATEX:\maketitle % Print the title and abstract box
#+LATEX:\thispagestyle{empty} % Removes page numbering from the first page
#+LATEX: \onecolumn

* Initial setup :noexport:ignore:

#+BEGIN_SRC python
import pandas as pd
import numpy as np
from datetime import datetime as dt
from datetime import timedelta

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from matplotlib.ticker import FuncFormatter

import seaborn as sns
import pandas_datareader.data as web
import requests
import json

import country_converter as coco
cc = coco.CountryConverter()

import matplotlib.image as image

logo = "./figs/Cecon_Logo.png"
logo = image.imread(logo)
corona_sp = '2020-03-24'
corona_sp_txt = "Início isolamento social em SP"

corona_60 = '2020-03-18'
corona_60_txt = "Mais de 60 casos de COVID-19"

start_year = "2018-01-01"
base = "2014-12-01"

def line_format(label):
    """
    Convert time label to the format of pandas line plot
    """
    month = label.month_name()[:3]
    if month == 'Jan':
        month += f'\n{label.year}'
    return month
#ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))

def interpolator(df):
    for col in df:
        df[col] = pd.to_numeric(df[col], errors='coerce')
        df = df.resample('D').interpolate(method='time')

    return df

def line_format(label):
    """
    Convert time label to the format of pandas line plot
    """
    month = label.month_name()[:3]
    if month == 'Jan':
        month += f'\n{label.year}'
    return month

def rebase(df, base=base):
    for col in df:
        df[col] = df[col].apply(lambda x: (100*x)/df[col][base])
    return df


def consulta_bc(codigo_bcb, nome = ["Nome da série"]):
  url = 'http://api.bcb.gov.br/dados/serie/bcdata.sgs.{}/dados?formato=json'.format(codigo_bcb)
  df = pd.read_json(url)
  df['data'] = pd.to_datetime(df['data'], dayfirst=True)
  df.set_index('data', inplace=True)
  df.index.name = ''
  df.columns = nome
  return df

#+END_SRC

#+RESULTS:
:results:
:end:

* Indicadores de antecedente
** IBC-Br (acumulado 12 meses vs 12 meses anteriores)

#+BEGIN_SRC python :results graphics file :file ./figs/Antecedente/IBCBr.png

df = consulta_bc(24364, ["IBCBr (%YoY)"])
df.index.name = ""
# df = rebase(df)
df = df.pct_change(12)
df = (1 + df / 100).rolling(window=12).agg(lambda x: x.prod()) - 1
df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"IBCBr Dessazonalizado",
    ax=ax,
    lw=2.5,
    color="black",
)
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label=corona_sp_txt)
ax.axhline(y=0, color="gray", ls="-")
ax.set_yticklabels(["{:,.2%}".format(x) for x in ax.get_yticks()])
ax.legend()
# ax.set_ylabel("Taxa de crescimento YoY (%)")
# ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()

fig.savefig(
    "./figs/Antecedente/" + "IBCBr" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/Antecedente/IBCBr.png]]

** Tráfego de veículos pesados nas estradas pedagiadas - ABCR - Dados dessazonalizados


#+BEGIN_SRC python  :results graphics file :file ./figs/Setoriais/TrafegoPedagio.png
df = consulta_bc(28553, ["ABCR"])


df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Tráfego de veículos pesados nas estradas pedagiadas\nDados dessazonalizados",
    ax=ax,
    lw=2.5,
)
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label="Início isolamento em SP")
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/Setoriais/TrafegoPedagio" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Setoriais/TrafegoPedagio.png]]


* Dados de alta frequência

** Bloomberg adaptado ao COVID-19 ([[https://www.bloomberg.com/news/articles/2020-11-13/alternative-data-show-activity-crashes-as-virus-resurges-chart][Link]])

- Não é público
- Substituiria CLIs

* Atividade


** Baixando dados e criando nomes :ignore:
#+BEGIN_SRC sh :dir ./raw/ContasNacionais/ :exports none :eval no
wget -N --backups=1 ftp://ftp.ibge.gov.br/Contas_Nacionais/Contas_Nacionais_Trimestrais/Tabelas_Completas/Tab_Compl_CNT.zip
unzip -o Tab_Compl_CNT.zip
mv *.xls Tab_Compl_CNT.xlsx
#+END_SRC

#+RESULTS:
:results:

--2021-01-06 17:25:59--  ftp://ftp.ibge.gov.br/Contas_Nacionais/Contas_Nacionais_Trimestrais/Tabelas_Completas/Tab_Compl_CNT.zip
“.listing”
Resolvendo ftp.ibge.gov.br (ftp.ibge.gov.br)... 170.84.40.44
Conectando-se a ftp.ibge.gov.br (ftp.ibge.gov.br)|170.84.40.44|:21... conectado.
Acessando como anonymous ... Acesso autorizado!
SYST ... feito.    ==> PWD ... feito.
TYPE I ... feito.  ==> CWD (1) /Contas_Nacionais/Contas_Nacionais_Trimestrais/Tabelas_Completas ... feito.
PASV ... feito.    ==> LIST ... feito.
Failed to rename .listing to .listing.1: (2) Arquivo ou diretório não encontrado
]       0  --.-KB/s               .listing                [ <=>                ]     194  --.-KB/s    em 0s

2021-01-06 17:26:00 (577 KB/s) - “.listing” salvo [194]

Removeu “.listing”.
O arquivo remoto não é mais novo que o local “Tab_Compl_CNT.zip” -- ignorando.
Archive:  Tab_Compl_CNT.zip
  inflating: Tab_Compl_CNT.xls
:end:

#+BEGIN_SRC python
Colunas = [
    "Agropecuaria",
    "Industria Extrativa",
    "Industria de Transformacao",
    "Eletricidade e agua",
    "Construcao",
    "Total Industria",
    "Comercio",
    "Transporte, armazenagem e correio",
    "Informacao e comunicacao",
    "Atividades Financeiras",
    "Atividades Imobiliarias",
    "Outras atividades",
    "ADM, defesa, etc",
    "Total Servicos",
    "VA",
    "PIB",
    "Consumo das Familias",
    "Consumo do Governo",
    "FBCF",
    "Exportacao",
    "Importacao"
]

Agropecuaria = ['Agropecuaria']

Industria = [
    "Industria Extrativa",
    "Industria de Transformacao",
    "Eletricidade e agua",
    "Construcao",
    "Total Industria"
]

Servicos = [
    "Comercio",
    "Transporte, armazenagem e correio",
    "Informacao e comunicacao",
    "Atividades Financeiras",
    "Atividades Imobiliarias",
    "Outras atividades",
    "ADM, defesa, etc",
    "Total Servicos",
]

Demanda = [
    "Consumo das Familias",
    "Consumo do Governo",
    "FBCF",
    "Exportacao",
    "Importacao"
]

Oferta = [
    'Agropecuaria',
    "Total Industria",
    "Total Servicos",
]

df = pd.read_excel('./raw/ContasNacionais/Tab_Compl_CNT.xlsx', header=3, sheet_name='Val encad preços 95 com ajuste', index_col=0)
df.index = df.index.str.replace('.', 'Q').str.replace('IV', '4').str.replace('III', '3').str.replace('II', '2').str.replace('I', '1')
df.index = pd.PeriodIndex(df.index, freq='Q')
df.columns = Colunas
df["Importacao"] = -df["Importacao"]
#+END_SRC

#+RESULTS:
:results:
:end:

** Trimestre Contra trimestre imediatamente anterior

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/PIB.png
fig = plt.figure(figsize=(9,4))
ax = plt.axes()
ax2 = plt.axes([0.15,0.6,0.2,0.2])

suptitle = 'Taxa de crescimento'
title = 'Trimestre contra trimestre anterior'


df['PIB'].pct_change()["2019":].plot(ax=ax, color='darkblue', kind='line')
ax.axhline(y=0, ls='--', color='black')

plt.suptitle(suptitle, color='black', weight = 'bold')
ax.set_title(title, color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
# ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

fig.savefig('./figs/PIB/PIB.png', dpi = 300,)
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/PIB.png]]

** Trimestre Contra mesmo trimestre do ano anterior

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/PIB_YoY.png
fig = plt.figure(figsize=(9,4))
ax = plt.axes()
ax2 = plt.axes([0.15,0.6,0.2,0.2])

suptitle = 'Taxa de crescimento'
title = 'Trimestre contra mesmo trimestre do ano anterior'


df['PIB'].pct_change(4)["2019":].plot(ax=ax, color='darkblue', kind='line')
ax.axhline(y=0, ls='--', color='black')

plt.suptitle(suptitle, color='black', weight = 'bold')
ax.set_title(title, color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
# ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

fig.savefig('./figs/PIB/PIB_YoY.png', dpi=300)
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/PIB_YoY.png]]

** Agropecuária

#+BEGIN_SRC python :results graphics file :file ./figs/PIB/Agropecuaria.png
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Agropecuaria].pct_change().tail(4).plot(kind='bar', ax=ax, color='darkblue')

plt.suptitle('Agricultura', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)

ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

fig.savefig(
    './figs/PIB/Agropecuaria.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Agropecuaria.png]]

** Indústria

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/Industria.png
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Industria].pct_change().tail(4).plot(kind='bar', ax=ax)

plt.suptitle('Indústria', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)

ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
fig.savefig(
    './figs/PIB/Industria.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Industria.png]]


** Serviços

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/Servicos.png
fig, ax = plt.subplots(figsize=(8,5))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Servicos].pct_change().tail(4).plot(kind='bar', ax=ax)
lgd = ax.legend(
    loc='center left',
    bbox_to_anchor=(1, 0.5)
)


plt.suptitle('Serviços', color='black', weight = 'bold')

ax.axhline(y=0, color='gray', linestyle='--', lw=2)

ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
fig.savefig(
    './figs/PIB/Servicos.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Servicos.png]]

** Demanda

#+BEGIN_SRC python   :results graphics file :file ./figs/PIB/Demanda.png
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Demanda + ['PIB']].pct_change().tail(4).plot(kind='bar', ax=ax)

plt.suptitle('Demanda', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
fig.savefig(
    './figs/PIB/Demanda.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Demanda.png]]

** Oferta


#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/Oferta.png
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Oferta + ['PIB']].pct_change().tail(4).plot(kind='bar', ax=ax)

plt.suptitle('Oferta', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)
#ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
plt.close()
fig.savefig(
    './figs/PIB/Oferta.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Oferta.png]]


** Contribuição para variação: Demanda

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/Contrib_Demanda.png
fig, ax = plt.subplots(figsize=(8,5))
ax2 = fig.add_axes([0.15,0.7,0.2,0.2])

df[Demanda].diff().apply(lambda x: x/(df["PIB"].shift())).tail(4).plot(
    kind = 'bar',
    stacked = True,
    ax = ax,
    color = (
        "tomato",
        "darkred",
        "darkslateblue",
        "tan",
        "khaki"
    ),
    width = 0.75,
    edgecolor='black'
)
plt.suptitle('Demanda', color='black', weight = 'bold')
ax.axhline(y=0, color='black', linestyle='-', lw=2)
#ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Contribuição para variação do PIB', color='black')

ax.text(0.95, -0.125, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.125, 'Atualizado em {}. Último dado disponível: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
fig.savefig(
    './figs/PIB/Contrib_Demanda.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Contrib_Demanda.png]]

** Contribuição para variação: Oferta

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/Contrib_Oferta.png
fig, ax = plt.subplots(1,1,figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


#df["PIB"].pct_change().tail(12).plot(ax = ax, kind = 'line', legend = True, color = 'black')
df[Oferta].diff().apply(lambda x: x/(df["VA"].shift())).tail(4).plot(
    kind = 'bar',
    stacked = True,
    ax = ax,
    color = (
        "green",
    #    "darkred",
        "darkslateblue",
        "tan",
    #    "khaki"
    ),
    cmap="Set1",
    width = 0.75,
    edgecolor='black'
)

plt.suptitle('Oferta', color='black', weight = 'bold')
ax.axhline(y=0, color='black', linestyle='-', lw=2)
#ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Contribuição para variação do valor adicionado', color='black')

ax.text(0.95, -0.125, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.125, 'Atualizado em {}. Último dado disponível: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
fig.savefig(
    './figs/PIB/Contrib_Oferta.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Contrib_Oferta.png]]


** Contribuição para variação: Serviços

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/Contrib_Servicos.png
fig, ax = plt.subplots(1, 1, figsize=(9, 4))
ax2 = fig.add_axes([0.15, 0.6, 0.2, 0.2])


# df["PIB"].pct_change().tail(12).plot(ax = ax, kind = 'line', legend = True, color = 'black')
df[Servicos].drop(["Total Servicos"], axis="columns").diff().apply(
    lambda x: x / (df["Total Servicos"].shift())
).tail(4).plot(
    kind="bar",
    stacked=True,
    ax=ax,
    color=(
        "green",
        "darkred",
        "darkslateblue",
        "tan",
        "khaki",
        "gray",
        "orange",
    ),
    cmap="Set1",
    width=0.75,
    edgecolor="black",
)

plt.suptitle("Serviços", color="black", weight="bold")
ax.axhline(y=0, color="black", linestyle="-", lw=2)
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))


ax.set_title("Contribuição para variação", color="black")

ax.text(
    0.95,
    -0.125,
    "Fonte: IBGE",
    verticalalignment="bottom",
    horizontalalignment="right",
    transform=ax.transAxes,
    color="black",
    fontsize=10,
)

ax.text(
    0.6,
    -0.125,
    "Atualizado em {}. Último dado disponível: {}".format(
        dt.now().strftime("%d/%m/%Y"), df.index[-1]
    ),
    verticalalignment="bottom",
    horizontalalignment="right",
    transform=ax.transAxes,
    color="black",
    fontsize=10,
)

sns.despine()
ax.tick_params(axis="x", colors="black")
ax.tick_params(axis="y", colors="black")
ax.yaxis.label.set_color("black")
ax.xaxis.label.set_color("black")
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: "{:.1%}".format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")
fig.savefig(
    "./figs/PIB/Contrib_Servicos.png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Contrib_Servicos.png]]

* Crédito
#+begin_src python
start_year = '2019-01-01'
#+end_src

#+RESULTS:
:results:
:end:

** Endividamento das famílias

#+BEGIN_SRC python :results graphics file :file ./figs/Credito/EndividamentoFamilias.png
titulo = "Endividamento das famílias\nTotal e Exceto crédito habitacional"
porcentagem = True
unidade = "renda acum.\núltimos 12 meses"
df = pd.concat(
    [
        consulta_bc(19882, ["Total"]),
        consulta_bc(20400, ["Exceto crédito habitacional"]),
    ],
    axis=1,
)
df = df[start_year:]
df.index.name = ""
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df[start_year:].plot(
    title=titulo,
    ax=ax,
    lw=2,
)
ax.axvline(
    x=corona_sp, color="black", ls="--", lw=1, label="Início isolamento\nsocial em SP"
)
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(["{:,.0f}".format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f"R$ {unidade}")
else:
    ax.set_yticklabels(["{:,.2%}".format(x / 100) for x in ax.get_yticks()])
    ax.set_ylabel(f"em % {unidade}")
ax2 = plt.axes([0.9, 0.6, 0.2, 0.2])


ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")


sns.despine()
plt.close()

fig.savefig(
    "./figs/Credito/EndividamentoFamilias" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Credito/EndividamentoFamilias.png]]


** Saldo Pessoal Jurídica - Nível
     
#+BEGIN_SRC python :results graphics file :file ./figs/Credito/SaldoPJ.png
titulo = "Saldo Pessoa jurídica"
porcentagem=False
unidade="Milhões"
df = pd.concat(
    [
        consulta_bc(20543, ["Saldo Pessoa jurídica livre"]),
        consulta_bc(20594, ["Saldo Pessoa jurídica direcionados"]),
    ],
    axis=1,
)
df = df[start_year:]
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    lw=2, 
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.2%}'.format(x/100) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.close()

fig.savefig(
    './figs/Credito/SaldoPJ' +   '.png',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
[[file:./figs/Credito/SaldoPJ.png]]



** Saldo Pessoa Jurídica - em % do PIB
#+BEGIN_SRC python :results graphics file :file ./figs/Credito/SaldoPJ_PIB.png
titulo = "Saldo Pessoa jurídica\nem % PIB"
porcentagem = True
unidade = "PIB"
df = pd.concat(
    [
        consulta_bc(20626, ["Recursos livres"]),
        consulta_bc(20629, ["Recursos direcionados"]),
    ],
    axis=1,
)
df = df[start_year:]
df.index.name = ""
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df[start_year:].plot(
    title=titulo,
    ax=ax,
    lw=2,
)
ax.axvline(
    x=corona_sp, color="black", ls="--", lw=1, label="Início isolamento\nsocial em SP"
)
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(["{:,.0f}".format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f"R$ {unidade}")
else:
    ax.set_yticklabels(["{:,.2%}".format(x / 100) for x in ax.get_yticks()])
    ax.set_ylabel(f"em % {unidade}")
ax2 = plt.axes([0.9, 0.6, 0.2, 0.2])


ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")


sns.despine()
plt.close()

fig.savefig(
    "./figs/Credito/SaldoPJ_PIB" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Credito/SaldoPJ_PIB.png]]

** Saldo Pessoa física - Nível

#+BEGIN_SRC python :results graphics file :file ./figs/Credito/SaldoPF.png
titulo = "Saldo Pessoa física"
porcentagem = False
unidade = "Milhões"
df = pd.concat(
    [
        consulta_bc(20570, ["Saldo Pessoa física livre"]),
        consulta_bc(20606, ["Saldo Pessoa física direcionados"]),
    ],
    axis=1,
)
df = df[start_year:]
df.index.name = ""
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df[start_year:].plot(
    title=titulo,
    ax=ax,
    lw=2,
)
ax.axvline(
    x=corona_sp, color="black", ls="--", lw=1, label="Início isolamento\nsocial em SP"
)
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(["{:,.0f}".format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f"R$ {unidade}")
else:
    ax.set_yticklabels(["{:,.2%}".format(x / 100) for x in ax.get_yticks()])
    ax.set_ylabel(f"em % {unidade}")
ax2 = plt.axes([0.9, 0.6, 0.2, 0.2])


ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")


sns.despine()
plt.close()

fig.savefig(
    "./figs/Credito/SaldoPF" + ".png", dpi=300, bbox_inches="tight", pad_inches=0
)
#+END_SRC

#+RESULTS:
[[file:./figs/Credito/SaldoPF.png]]


** Saldo Pessoa física - em % do PIB

#+BEGIN_SRC python :results graphics file :file ./figs/Credito/SaldoPF_PIB.png
titulo = "Saldo Pessoa física\nem % PIB"
porcentagem = True
unidade = "PIB"
df = pd.concat(
    [
        consulta_bc(20627, ["Recursos livres"]),
        consulta_bc(20630, ["Recursos direcionados"]),
    ],
    axis=1,
)
df = df[start_year:]
df.index.name = ""
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df[start_year:].plot(
    title=titulo,
    ax=ax,
    lw=2,
)
ax.axvline(
    x=corona_sp, color="black", ls="--", lw=1, label="Início isolamento\nsocial em SP"
)
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(["{:,.0f}".format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f"R$ {unidade}")
else:
    ax.set_yticklabels(["{:,.2%}".format(x / 100) for x in ax.get_yticks()])
    ax.set_ylabel(f"em % {unidade}")
ax2 = plt.axes([0.9, 0.6, 0.2, 0.2])


ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")


sns.despine()
plt.close()

fig.savefig(
    "./figs/Credito/SaldoPF_PIB" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Credito/SaldoPF_PIB.png]]


** Crédito ampliado em % do Total

#+BEGIN_SRC python :results graphics file :file ./figs/Credito/SaldoCreditoAmpliado_Total.png
titulo = "Saldo Crédito Ampliado\nem % do Total"
porcentagem=True
unidade="do Total"
df = pd.concat(
    [
        consulta_bc(28183, ["Setor não financeiro"]),
        consulta_bc(28196, ["Governo geral"]),
        consulta_bc(28203, ["Empresas e Famílias"]),
    ],
    axis=1,
)
df = df[start_year:]
df = df.apply(pd.to_numeric, errors='coerce')
df["Total"] = df.sum(axis=1)
df = df.apply(lambda x: x/df["Total"]).drop(["Total"], axis='columns')

df.index.name = ''


fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    kind='bar', stacked=True, edgecolor='black',
    lw=2,
)
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
#ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else:
    ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.close()

fig.savefig(
    './figs/Credito/SaldoCreditoAmpliado_Total' + '.png',
    dpi = 300,
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
[[file:./figs/Credito/SaldoCreditoAmpliado_Total.png]]

** Indicadores de aprovação de crédito

#+BEGIN_SRC python :results graphics file :file ./figs/Credito/PTC.png
titulo = "Indicadores de aprovação de crédito\nAprovações Esperadas - Observadas"
porcentagem=False
unidade="Pontos"
df = pd.concat(
    [
        consulta_bc(21396, ["Grandes - Esperadas"]),
        consulta_bc(21397, ["Grandes - Observadas"]),
        consulta_bc(21398, ["Micro - Esperadas"]),
        consulta_bc(21399, ["Micro - Observadas"]),
        consulta_bc(21400, ["Consumo - Esperadas"]),
        consulta_bc(21401, ["Consumo - Observadas"]),
        consulta_bc(21402, ["Habitacional - Esperadas"]),
        consulta_bc(21403, ["Habitacional - Observadas"]),
    ],
    axis=1,
)
df["Grandes Empresas"] = df["Grandes - Esperadas"] - df["Grandes - Observadas"]
df["Micro, Pequenas e Médias Empresas"] = df["Micro - Esperadas"] - df["Micro - Observadas"]
df["Consumo"] = df["Consumo - Esperadas"] - df["Consumo - Observadas"]
df["Habitacional"] = df["Habitacional - Esperadas"] - df["Habitacional - Observadas"]
df = df[["Grandes Empresas", "Micro, Pequenas e Médias Empresas", "Consumo", "Habitacional"]]

df = interpolator(df)
df = df[start_year:]

df.index.name = ''

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = titulo,
    ax = ax,
    # kind='bar', stacked=True, edgecolor='black',
    lw=2,
)
# ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
ax.set_ylabel('Esperadas - Observadas (Pontos)')
ax.axhline(y = 0, color='black', ls='-', lw=1,)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
# if porcentagem == False:
#     ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
#     ax.set_ylabel(f'{unidade}')
# else:
#     ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
#     ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.close()

fig.savefig(
    './figs/Credito/PTC' + '.png',
    dpi = 300,
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
[[file:./figs/Credito/PTC.png]]

** Recolhimentos compulsórios de instituições financeiras

#+BEGIN_SRC python :results graphics file :file ./figs/Credito/Requerimentos_Total.png
titulo = "Recolhimentos compulsórios de instituições financeira\nSaldo Total"
porcentagem=False
unidade="u.m.c (mil)"

df = consulta_bc(17633, ["Saldo Total"])

df = df[start_year:]
df = df.apply(pd.to_numeric, errors='coerce')

df.index.name = ''


fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    lw=2,
)
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else:
    ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.135,0.135,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.close()

fig.savefig(
    './figs/Credito/Recolhimentos_Total' + '.png',
    dpi = 300,
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
[[file:./figs/Credito/Requerimentos_Total.png]]

* Índices de atividade setoriais


** Pesquisa Mensal do Comércio (PMC)

#+BEGIN_SRC python  :file ./figs/Setoriais/PMC_IBGE.png :results graphics file
df = pd.concat(
    [
        consulta_bc(28473, ["Total"]),
        consulta_bc(28474, ["Combustíveis e lubrificantes"]),
        consulta_bc(28475, ["Hipermercados, supermercados, produtos alimentícios, bebidas e fumo"]),
        consulta_bc(28477, ["Tecido, vestuário e calçado"]),
        consulta_bc(28478, ["Móveis e eletrodomésticos - Brasil - Dados dessazonalizados"]),
        consulta_bc(28479, ["Automóveis, motocicletas, partes e peças"]),
        consulta_bc(28480, ["Artigos farmacêuticos, médicos, ortopédicos, perfumaria e cosméticos"]),
        consulta_bc(28481, ["Livros, jornais, revistas e papelaria"]),
        consulta_bc(28482, ["Equipamentos e materiais para escritório e comunicação"]),
        consulta_bc(28483, ["Outros artigos de uso pessoal e doméstico"]),
        consulta_bc(28484, ["Material de construção"]),
        consulta_bc(28485, ["Comércio ampliado"]),
    ],
    axis=1,
)
df.index.name = ''
for col in df:
    df[col] = df[col].apply(lambda x: (100*x)/df[col][base])

df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = f"Pesquisa Mensal do Comércio (PMC)\nVolume de Vendas Dessazonalizado\n{base} = 100",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.close()

fig.savefig(
    './figs/Setoriais/PMC_IBGE' + '.png',
    dpi = 300,
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
[[file:./figs/Setoriais/PMC_IBGE.png]]


** Pesquisa Industrial Mensal (PIM)

#+BEGIN_SRC python  :file ./figs/Setoriais/PIM_IBGE.png :results graphics file
df = pd.concat(
    [
        consulta_bc(28503, ["Geral"]),
        consulta_bc(28504, ["Extrativa mineral"]),
        consulta_bc(28505, ["Indústria de transformação"]),
        consulta_bc(28506, ["Bens de capital"]),
        consulta_bc(28507, ["Bens intermediários"]),
        consulta_bc(28508, ["Bens de consumo"]),
        consulta_bc(28509, ["Bens de consumo duráveis"]),
        consulta_bc(28510, ["Semiduráveis e não duráveis"]),
        consulta_bc(28511, ["Insumos da construção civil"]),
    ],
    axis=1,
)
df.index.name = ""
for col in df:
    df[col] = df[col].apply(lambda x: (100 * x) / df[col][base])

df = df[start_year:]
df = interpolator(df)


fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Pesquisa Industrial Mensal (PIM)\nSeções de atividades desazonalizadas\n{base} = 100",
    ax=ax,
    lw=2.5,
)
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label="Início isolamento em SP")
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/Setoriais/PIM_IBGE" + ".png", dpi=300, bbox_inches="tight", pad_inches=0
)
#+END_SRC

#+RESULTS:
[[file:./figs/Setoriais/PIM_IBGE.png]]


** Pesquisa Mensal de Serviços (PMS)

#+BEGIN_SRC python  :results graphics file :file ./figs/Setoriais/PMS_IBGE.png
file_name = "PMS_IBGE"
df = pd.concat(
    [
        consulta_bc(21637, ["Total"]),
        consulta_bc(21638, ["Prestados às famílias"]),
        consulta_bc(21639, ["Informação e comunicação"]),
        consulta_bc(21640, ["Profissionais, Administrativos e Complementares"]),
        consulta_bc(21641, ["Transportes, Serviços auxiliares e Correio"]),
        consulta_bc(21642, ["Outros"]),
    ],
    axis=1,
)
df.index.name = ''

for col in df:
    df[col] = df[col].apply(lambda x: (100*x)/df[col].loc[base])

df = df[start_year:]
df = interpolator(df)
df.columns = [
    "Total Geral",
    "Serviços prestados às Famílias",
    "Serviços de informação e comunicação",
    "Serviços Profissionais, Administrativos e Complementares",
    "Transportes, Serviços auxiliares aos transportes e Correio",
    "Outros serviços"
]

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = f"Pesquisa Mensal de Serviços (PMS)\nÍndice de Volume de serviços dessazonalizado\n{base} = 100",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.close()

fig.savefig(
    './figs/Setoriais/PMS_IBGE' + '.png',
    dpi = 300,
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
[[file:./figs/Setoriais/PMS_IBGE.png]]

* Emprego

** Rendimento médio real habitual das pessoas ocupadas


#+BEGIN_SRC python  :results graphics file :file ./figs/Emprego/RMHPO.png
df = pd.concat(
    [
        consulta_bc(24383, ["Com carteira"]),
        consulta_bc(24384, ["Sem carteira"]),
        consulta_bc(24385, ["Setor privado"]),
        consulta_bc(24386, ["Setor público"]),
        consulta_bc(24387, ["Conta própria"]),
        consulta_bc(24388, ["Empregadores"]),
    ],
    axis=1,
)

df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Rendimento médio real habitual\ndas pessoas ocupadas - PNADC",
    ax=ax,
    lw=2.5,
)
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label="Início isolamento em SP")
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/Emprego/RMHPO" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Emprego/RMHPO.png]]

** Massa de rendimento real efetiva e habitual de todos os trabalhos

#+BEGIN_SRC python  :results graphics file :file ./figs/Emprego/MRR_Efetiva_Habitual.png
df = pd.concat(
    [
        consulta_bc(28544, ["Efetiva"]),
        consulta_bc(28545, ["Habitual"]),
    ],
    axis=1,
)

df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Massa de rendimento real efetiva e\nhabitual de todos os trabalhos",
    ax=ax,
    lw=2.5,
)
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label="Início isolamento em SP")
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/Emprego/MRR_Efetiva_Habitual" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Emprego/MRR_Efetiva_Habitual.png]]

** Massa Salarial Ampliada Disponível - PNADC

#+BEGIN_SRC python  :results graphics file :file ./figs/Emprego/MSAD.png
df = consulta_bc(22079, ["MSAD - PNADC"])

df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Massa Salarial Ampliada Disponível PNADC",
    ax=ax,
    lw=2.5,
)
ax.set_yticklabels(["{:,.2f}".format(x / 1000) for x in ax.get_yticks()])
ax.set_ylabel('R$ Bilhões')
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label="Início isolamento em SP")
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/Emprego/MSAD" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Emprego/MSAD.png]]

** Rendimento habitual médio por atividade


#+BEGIN_SRC python   :tangle ./codes/pnad.py :eval no
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Mensal RHM Setor Real",
    skiprows = 11,
    usecols = "A:K",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Rendimento habitual médio por atividade",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.close()

fig.savefig(
    image_path + file_path.strip("/")[-1] + "RHM_Setor" + "_" + '.png',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

** Número de horas trabalhadas - indústria de transformação

#+BEGIN_SRC python  :results graphics file :file ./figs/Emprego/Horas_Transformacao.png
df = consulta_bc(24348, ["Indústria de transformação"])

df = rebase(df, base='2020-01-01')
df = df['2019-01-01':]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Número de horas trabalhadas - Dados dessazonalizados\nJan/2020 = 100",
    ax=ax,
    lw=2.5,
)
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label="Início isolamento em SP")
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/Emprego/Horas_Transformacao" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Emprego/Horas_Transformacao.png]]

** Novo CAGED  - Por atividade (dados dessazonalizados)

#+BEGIN_SRC python :results graphics file :file ./figs/Emprego/NovoCaged_Atividade.png
df = pd.concat(
    [
        # consulta_bc(28784, ["Total"]),
        consulta_bc(28785, ["Agropecuária"]),
        consulta_bc(28786, ["Indústrias extrativas"]),
        consulta_bc(28787, ["Indústrias de transformação"]),
        # consulta_bc(28788, ["SIUP"]),
        # consulta_bc(28789, ["Eletricidade e gás"]),
        # consulta_bc(28790, ["Água, esgoto, atividades de\ngestão de resíduos e descontaminação"]),
        consulta_bc(28791, ["Construção"]),
        consulta_bc(28792, ["Comércio"]),
        consulta_bc(28793, ["Serviços"]),
        # consulta_bc(28794, ["Transporte, armazenamento e correios"]),
        # consulta_bc(28795, ["Alojamento e alimentação"]),
        # consulta_bc(28796, ["Informação e comunicação"]),
        # consulta_bc(28797, ["Atividades financeiras e seguros"]),
        # consulta_bc(28798, ["Atividades imobiliárias"]),
        # consulta_bc(28799, ["Atividades profissionais, científicas e técnicas"]),
        # consulta_bc(28800, ["Atividades administrativas e serviços complementares"]),
        # consulta_bc(28801, ["Administração pública, defesa e seguridade social"]),
        consulta_bc(28802, ["Educação"]),
        consulta_bc(28803, ["Saúde e serviços sociais"]),
        # consulta_bc(28804, ["Outras atividades de serviços"]),
    ],
    axis = 1
)
df.index.name = ''
df = df['2019':]

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Novo Caged por atividade - Dados dessazonalizados",
    ax = ax,
    lw = 1.5,
    edgecolor = 'black',
    kind = 'bar', stacked = True, width=0.9
)



ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([.9,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.close()

fig.savefig(
    './figs/Emprego/NovoCaged_Atividade.png',
    dpi = 300,
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
[[file:./figs/Emprego/NovoCaged_Atividade.png]]



** Taxa de desocupação

#+BEGIN_SRC python  :results graphics file :file ./figs/Emprego/TaxaDesocupacao.png
df = consulta_bc(24369, ["Taxa de desocupação - PNADC"])


df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Taxa de desocupação\nPNADC (em %)",
    ax=ax,
    lw=2.5,
)
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label="Início isolamento em SP")
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/Emprego/TaxaDesocupacao" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Emprego/TaxaDesocupacao.png]]


** Desalentados e subocupados :noexport:

#+BEGIN_SRC python   :tangle ./codes/pnad.py :eval no
var = "Desalentados_Subocupados"
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Dessaz",
    skiprows = 11,
    usecols = "A,D,S,T",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
df.columns = [
    "Força de trabalho",
    "Subocupados",
    "Desalentados"
]
df = df.apply(pd.to_numeric, errors='coerce')
df["Taxa de desalentados"] = df["Desalentados"]/df["Força de trabalho"]
df["Taxa de Subocupados por \ninsuficiência de horas trabalhadas"] = df["Subocupados"]/df["Força de trabalho"]
df = df[start_year:]
df = df[["Taxa de desalentados", "Taxa de Subocupados por \ninsuficiência de horas trabalhadas"]]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Taxa de desalentados e subocupatos\n(em % da força de trabalho)",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.close()

fig.savefig(
    image_path + file_path.strip("/")[-1] + var.replace(" ", "_") + "_" + '.png',
    dpi = 300,
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

* PNAD-COVID
** Pendências :noexport:
*** TODO Incluir logos
** Home office - Por sexo e cor




[[./figs/PNAD_COVID/home_sexo_cor.png]]

** Home office - Por Cor e Escolaridade
[[./figs/PNAD_COVID/home_edu_cor.png]]
** Home office - Por Cor e Idade
[[./figs/PNAD_COVID/home_sexo_idade.png]]

** Home office - Por Trabalho
[[./figs/PNAD_COVID/home_emprego.png]]

** Home office - Por faixa salarial e cor
[[./figs/PNAD_COVID/home_renda.png]]
** Auxilio - Faixa Salarial
[[./figs/PNAD_COVID/auxilio_renda.png]]
** Auxilio - Por tipo do domicilio
[[./figs/PNAD_COVID/auxilio_domicilio.png]]
** Auxilio - Sexo e Cor
[[./figs/PNAD_COVID/auxilio_cor_sexo.png]]


* Relatório do Tesouro :noexport:

* IPEA e importância do Auxílio Emergencial :noexport:

* Base de dados FMI (Fiscal Monitor e WEO) :noexport:
