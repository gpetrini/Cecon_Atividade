#+TITLE: Dados: O PIB da pandemia e cen√°rios para 2021
#+DATE: Janeiro de 2021
#+LATEX_CLASS: SelfArx
#+SETUPFILE: ../manuscript.setup
#+INCLUDE: Infos.org
#+PROPERTY: header-args python :results output drawer :eval never-export :session Cecon
#+PROPERTY: header-args R :results output drawer :eval never-export :session Cecon
#+LATEX:\flushbottom % Makes all text pages the same height
#+LATEX:\maketitle % Print the title and abstract box
#+LATEX:\thispagestyle{empty} % Removes page numbering from the first page
#+LATEX: \onecolumn

* Initial setup :noexport:ignore:
** Python
#+BEGIN_SRC python
import pandas as pd
import numpy as np
from datetime import datetime as dt
from datetime import timedelta

from tabulate import tabulate

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from matplotlib.ticker import FuncFormatter

import seaborn as sns
import pandas_datareader.data as web
import requests
import json

import country_converter as coco
cc = coco.CountryConverter()

import matplotlib.image as image

logo = "./figs/Cecon_Logo.png"
logo = image.imread(logo)
corona_sp = '2020-03-24'
corona_sp_txt = "In√≠cio isolamento social em SP"

corona_60 = '2020-03-18'
corona_60_txt = "Mais de 60 casos de COVID-19"

start_year = "2018-01-01"
base = "2014-12-01"

def line_format(label):
    """
    Convert time label to the format of pandas line plot
    """
    month = label.month_name()[:3]
    if month == 'Jan':
        month += f'\n{label.year}'
    return month
#ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))

def line_format_day(label):
    """
    Convert time label to the format of pandas line plot
    """
    month = label.month_name()[:3]
    day = label.day
    string = f"{day}/{month}"
    return month
def interpolator(df):
    for col in df:
        df[col] = pd.to_numeric(df[col], errors='coerce')
        df = df.resample('D').interpolate(method='time')

    return df

def line_format(label):
    """
    Convert time label to the format of pandas line plot
    """
    month = label.month_name()[:3]
    if month == 'Jan':
        month += f'\n{label.year}'
    return month

def rebase(df, base=base):
    for col in df:
        df[col] = df[col].apply(lambda x: (100*x)/df[col][base])
    return df


def consulta_bc(codigo_bcb, nome = ["Nome da s√©rie"]):
  url = 'http://api.bcb.gov.br/dados/serie/bcdata.sgs.{}/dados?formato=json'.format(codigo_bcb)
  df = pd.read_json(url)
  df['data'] = pd.to_datetime(df['data'], dayfirst=True)
  df.set_index('data', inplace=True)
  df.index.name = ''
  df.columns = nome
  return df
def autolabel(rects):
    """
    Attach a text label above each bar displaying its height
    """
    for rect in rects:
        height = rect.get_height()
        ax.text(rect.get_x() + rect.get_width()/2., 1.05*height,
                '%d' % int(height),
                ha='center', va='bottom')
def add_value_labels(ax, spacing=5):
    """Add labels to the end of each bar in a bar chart.

    Arguments:
        ax (matplotlib.axes.Axes): The matplotlib object containing the axes
            of the plot to annotate.
        spacing (int): The distance between the labels and the bars.
    """

    # For each bar: Place a label
    for rect in ax.patches:
        # Get X and Y placement of label from rect.
        y_value = rect.get_height()
        x_value = rect.get_x() + rect.get_width() / 2

        # Number of points between bar and label. Change to your liking.
        space = spacing
        # Vertical alignment for positive values
        va = 'bottom'

        # If value of bar is negative: Place label below bar
        if y_value < 0:
            # Invert space to place label below
            space *= -1
            # Vertically align label at top
            va = 'top'

        # Use Y value as label and format number with one decimal place
        label = "{:.1f}".format(y_value)

        # Create annotation
        ax.annotate(
            label,                      # Use `label` as label
            (x_value, y_value),         # Place label at end of the bar
            xytext=(0, space),          # Vertically shift label by `space`
            textcoords="offset points", # Interpret `xytext` as offset in points
            ha='center',                # Horizontally center label
            va=va)                      # Vertically align label differently for
                                        # positive and negative values.

#+END_SRC

#+RESULTS:
:results:
:end:
** R

#+begin_src R
library(sidrar)
library(tidyverse)
#+end_src

#+RESULTS:
:results:
‚îÄ‚îÄ [1mAttaching packages[22m ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 1.3.0 ‚îÄ‚îÄ
[32m‚úî[39m [34mggplot2[39m 3.3.2     [32m‚úî[39m [34mpurrr  [39m 0.3.4
[32m‚úî[39m [34mtibble [39m 3.0.4     [32m‚úî[39m [34mdplyr  [39m 1.0.2
[32m‚úî[39m [34mtidyr  [39m 1.1.2     [32m‚úî[39m [34mstringr[39m 1.4.0
[32m‚úî[39m [34mreadr  [39m 1.4.0     [32m‚úî[39m [34mforcats[39m 0.5.0
‚îÄ‚îÄ [1mConflicts[22m ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ
[31m‚úñ[39m [34mdplyr[39m::[32mfilter()[39m masks [34mstats[39m::filter()
[31m‚úñ[39m [34mdplyr[39m::[32mlag()[39m    masks [34mstats[39m::lag()
:end:

* Indicadores de antecedente
** IBC-Br (acumulado 12 meses vs 12 meses anteriores)

#+BEGIN_SRC python :results graphics file :file ./figs/Antecedente/IBCBr.png

df = consulta_bc(24364, ["IBCBr (%YoY)"])
df.index.name = ""
# df = rebase(df)
df = df.pct_change(12)
df = (1 + df / 100).rolling(window=12).agg(lambda x: x.prod()) - 1
df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"IBCBr Dessazonalizado",
    ax=ax,
    lw=2.5,
    color="black",
)
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label=corona_sp_txt)
ax.axhline(y=0, color="gray", ls="-")
ax.set_yticklabels(["{:,.2%}".format(x) for x in ax.get_yticks()])
ax.legend()
# ax.set_ylabel("Taxa de crescimento YoY (%)")
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()

fig.savefig(
    "./figs/Antecedente/" + "IBCBr" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/Antecedente/IBCBr.png]]

** Tr√°fego de ve√≠culos pesados nas estradas pedagiadas - ABCR - Dados dessazonalizados


#+BEGIN_SRC python  :results graphics file :file ./figs/Setoriais/TrafegoPedagio.png
df = consulta_bc(28553, ["ABCR"])


df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Tr√°fego de ve√≠culos pesados nas estradas pedagiadas\nDados dessazonalizados",
    ax=ax,
    lw=2.5,
)
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label="In√≠cio isolamento em SP")
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/Setoriais/TrafegoPedagio" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Setoriais/TrafegoPedagio.png]]


* Dados de alta frequ√™ncia

** Bloomberg adaptado ao COVID-19 ([[https://www.bloomberg.com/news/articles/2020-11-13/alternative-data-show-activity-crashes-as-virus-resurges-chart][Link]])

** Google Reports: Brasil

#+BEGIN_SRC python :results graphics file :file ./figs/Granulares/GoogleReport_Brasil.png
import matplotlib.dates as mdates


df = pd.read_csv(
    'https://raw.githubusercontent.com/ActiveConclusion/COVID19_mobility/master/google_reports/mobility_report_brazil.csv',
    index_col = 'date',
    dayfirst=True
)
df = df[df['sub region 1'] == 'Total'].copy(deep=True)
df.drop(['country', 'sub region 1', 'sub region 2'], axis = 'columns', inplace=True)
df.index.name=''
df.index = pd.to_datetime(df.index)
df.columns = [
    'Varejo e recrea√ß√£o',
    'Mercados e Farm√°cias',
    'Parques',
    'Esta√ß√µes de transporte p√∫blico',
    'Locais de trabalho',
    'Resid√™ncia',
]

fig, ax = plt.subplots(figsize=(8, 5))
df.rolling(7).mean().plot(
    title='Relat√≥rio de mobilidade do google\nSemana M√≥vel',
    ax=ax,
    lw=2,
)
ax.axvline(
    x=corona_sp, color="black", ls="--", lw=1, label="In√≠cio isolamento\nsocial em SP"
)

ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))

# Formatando eixos
days = mdates.DayLocator()   # every day
months = mdates.MonthLocator()  # every month
m_fmt = mdates.DateFormatter('%b')
#
# format the ticks
ax.xaxis.set_major_locator(months)
ax.xaxis.set_major_formatter(m_fmt)
# ax.xaxis.set_minor_locator(days)
ax.format_xdata = mdates.DateFormatter('%d/%m')

ax2 = plt.axes([0.9, 0.675, 0.2, 0.2])

ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

fig.autofmt_xdate()

sns.despine()
plt.close()

fig.savefig(
    "./figs/Granulares/GoogleReport_Brasil" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Granulares/GoogleReport_Brasil.png]]

** Apple: Tend√™ncias de mobilidade

#+BEGIN_SRC python :results graphics file :file ./figs/Granulares/AppleReport_Brasil.png
df = pd.read_csv(
    'https://raw.githubusercontent.com/ActiveConclusion/COVID19_mobility/master/apple_reports/applemobilitytrends.csv',
    # index_col = 'date',
    # dayfirst=True
)
df = df[df['country'] == 'Brazil'].copy(deep=True)
df = df[df['geo_type'] == 'sub-region'].copy(deep=True)
df = df[df['transportation_type'] == 'driving'].copy(deep=True)
df.drop([
    'country',
    'geo_type',
    'transportation_type',
    'sub-region',
    'alternative_name',
], axis = 'columns', inplace=True)
df.set_index('region', inplace=True)
df.index.name=''
df = df.transpose().bfill()
df.index = pd.to_datetime(df.index)

fig, ax = plt.subplots(figsize=(8, 5))
df.rolling(7).mean().plot(
    title=f'Relat√≥rio de mobilidade da Apple: Dire√ß√£o\nSemana M√≥vel - {df.index[0]: %d/%b/%Y} = 100',
    ax=ax,
    lw=2,
)
ax.axvline(
    x=corona_sp, color="black", ls="--", lw=1, label="In√≠cio isolamento\nsocial em SP"
)

ax.legend(
    loc='upper center',
    bbox_to_anchor=(0.5, -0.05),
    ncol=4
)

# Formatando eixos
days = mdates.DayLocator()   # every day
months = mdates.MonthLocator()  # every month
m_fmt = mdates.DateFormatter('%b')
#
# format the ticks
ax.xaxis.set_major_locator(months)
ax.xaxis.set_major_formatter(m_fmt)
# ax.xaxis.set_minor_locator(days)
ax.format_xdata = mdates.DateFormatter('%d/%m')

ax2 = plt.axes([0.9, 0.675, 0.2, 0.2])

ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

fig.autofmt_xdate()

sns.despine()
plt.close()

fig.savefig(
    "./figs/Granulares/AppleReport_Brasil" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Granulares/AppleReport_Brasil.png]]

** Waze: $\Delta \%$ Km

#+BEGIN_SRC python :results graphics file :file ./figs/Granulares/Waze_Brasil.png
df = pd.read_csv(
    'https://raw.githubusercontent.com/ActiveConclusion/COVID19_mobility/master/waze_reports/Waze_Country-Level_Data.csv',
    index_col = 'Date',
    dayfirst=True
)
df = df[df['Country'] == 'Brazil'].copy(deep=True)
df.index.name=''
df.index = pd.to_datetime(df.index)

fig, ax = plt.subplots(figsize=(8, 5))
df.rolling(7).mean().plot(
    title='Waze: Mudan√ßa percentual de Kilometros andados\nSemana M√≥vel',
    ax=ax,
    lw=2,
)
ax.axvline(
    x=corona_sp, color="black", ls="--", lw=1, label="In√≠cio isolamento\nsocial em SP"
)

ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))

# Formatando eixos
days = mdates.DayLocator()   # every day
months = mdates.MonthLocator()  # every month
m_fmt = mdates.DateFormatter('%b')
#
# format the ticks
ax.xaxis.set_major_locator(months)
ax.xaxis.set_major_formatter(m_fmt)
# ax.xaxis.set_minor_locator(days)
ax.format_xdata = mdates.DateFormatter('%d/%m')

ax2 = plt.axes([0.9, 0.675, 0.2, 0.2])

ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

fig.autofmt_xdate()

sns.despine()
plt.close()

fig.savefig(
    "./figs/Granulares/Waze_Brasil" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Granulares/Waze_Brasil.png]]

** TomTom: Congestionamento

#+BEGIN_SRC python :results graphics file :file ./figs/Granulares/TomTom_Brasil.png
df = pd.read_csv(
    'https://raw.githubusercontent.com/ActiveConclusion/COVID19_mobility/master/tomtom_reports/tomtom_trafic_index.csv',
    index_col = 'date',
    dayfirst=True
)
df = df[df['country'] == 'Brazil'].copy(deep=True)
df.index.name=''
df.index = pd.to_datetime(df.index)

df['Capitais'] = df['city']
df['Varia√ß√£o do congestionamento'] = df['diffRatio'].rolling(7).mean()

df = df[[
    'Capitais',
    'Varia√ß√£o do congestionamento'
]].dropna()
df['Capitais'] = df['Capitais'].astype('category')
df = pd.pivot(df, columns='Capitais')
df.columns = df.columns.get_level_values(1)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title='TomTom: Varia√ß√£o percentual do congestionamento\nem rela√ß√£o a 2019 - Semana M√≥vel',
    ax=ax,
    lw=1.5,
)
ax.axvline(
    x=corona_sp, color="black", ls="--", lw=1, label="In√≠cio isolamento\nsocial em SP"
)

ax.legend(
    loc="center left",
    bbox_to_anchor=(1, 0.5),
    title = 'Capitais',
)

# Formatando eixos
days = mdates.DayLocator()   # every day
months = mdates.MonthLocator()  # every month
m_fmt = mdates.DateFormatter('%b')
#
# format the ticks
ax.xaxis.set_major_locator(months)
ax.xaxis.set_major_formatter(m_fmt)
# ax.xaxis.set_minor_locator(days)
ax.format_xdata = mdates.DateFormatter('%d/%m')

ax2 = plt.axes([0.7, 0.675, 0.2, 0.2])

ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

fig.autofmt_xdate()

sns.despine()
plt.close()

fig.savefig(
    "./figs/Granulares/TomTom_Brasil" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Granulares/TomTom_Brasil.png]]

* Atividade


** Baixando dados e criando nomes :ignore:
#+BEGIN_SRC sh :dir ./raw/ContasNacionais/ :exports none :eval no
wget -N --backups=1 ftp://ftp.ibge.gov.br/Contas_Nacionais/Contas_Nacionais_Trimestrais/Tabelas_Completas/Tab_Compl_CNT.zip
unzip -o Tab_Compl_CNT.zip
mv *.xls Tab_Compl_CNT.xlsx
#+END_SRC

#+BEGIN_SRC python
Colunas = [
    "Agropecuaria",
    "Industria Extrativa",
    "Industria de Transformacao",
    "Eletricidade e agua",
    "Construcao",
    "Total Industria",
    "Comercio",
    "Transporte, armazenagem e correio",
    "Informacao e comunicacao",
    "Atividades Financeiras",
    "Atividades Imobiliarias",
    "Outras atividades",
    "ADM, defesa, etc",
    "Total Servicos",
    "VA",
    "PIB",
    "Consumo das Familias",
    "Consumo do Governo",
    "FBCF",
    "Exportacao",
    "Importacao"
]

Agropecuaria = ['Agropecuaria']

Industria = [
    "Industria Extrativa",
    "Industria de Transformacao",
    "Eletricidade e agua",
    "Construcao",
    "Total Industria"
]

Servicos = [
    "Comercio",
    "Transporte, armazenagem e correio",
    "Informacao e comunicacao",
    "Atividades Financeiras",
    "Atividades Imobiliarias",
    "Outras atividades",
    "ADM, defesa, etc",
    "Total Servicos",
]

Demanda = [
    "Consumo das Familias",
    "Consumo do Governo",
    "FBCF",
    "Exportacao",
    "Importacao"
]

Oferta = [
    'Agropecuaria',
    "Total Industria",
    "Total Servicos",
]

df = pd.read_excel('./raw/ContasNacionais/Tab_Compl_CNT.xlsx', header=3, sheet_name='Val encad pre√ßos 95 com ajuste', index_col=0)
df.index = df.index.str.replace('.', 'Q').str.replace('IV', '4').str.replace('III', '3').str.replace('II', '2').str.replace('I', '1')
df.index = pd.PeriodIndex(df.index, freq='Q')
df.columns = Colunas
df["Importacao"] = -df["Importacao"]
#+END_SRC

** Trimestre Contra trimestre imediatamente anterior

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/PIB.png
fig = plt.figure(figsize=(9, 4))
ax = plt.axes()
ax2 = plt.axes([0.15, 0.6, 0.2, 0.2])

suptitle = "Taxa de crescimento"
title = "Trimestre contra trimestre anterior"


df["PIB"].pct_change()["2019":].plot(
    ax=ax,
    color="darkblue",
    kind="bar",
    edgecolor="black",
    lw=1.5,
)
ax.axhline(y=0, ls="-", color="black")

plt.suptitle(suptitle, color="black", weight="bold")
ax.set_title(title, color="black")

# ax.text(0.95, -0.2, 'Fonte: IBGE',
#         verticalalignment='bottom', horizontalalignment='right',
#         transform=ax.transAxes,
#         color='black', fontsize=10)

# ax.text(0.6, -0.2, 'Atualizado em {}. √öltimo dado dispon√≠vel: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
#         verticalalignment='bottom', horizontalalignment='right',
#         transform=ax.transAxes,
#         color='black', fontsize=10)

# sns.set_style("white")
sns.set_context("paper", font_scale=1.2)
sns.despine()
ax.tick_params(axis="x", colors="black")
ax.tick_params(axis="y", colors="black")
ax.yaxis.label.set_color("black")
ax.xaxis.label.set_color("black")
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: "{:.1%}".format(y)))
# ax.set_xticklabels(ax.get_xticklabels(), rotation=0)
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

fig.savefig(
    "./figs/PIB/PIB.png",
    dpi=300,
    bbox_inches="tight",
)
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/PIB.png]]

** Trimestre Contra mesmo trimestre do ano anterior

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/PIB_YoY.png
fig = plt.figure(figsize=(9,4))
ax = plt.axes()
ax2 = plt.axes([0.15,0.6,0.2,0.2])

suptitle = 'Taxa de crescimento'
title = 'Trimestre contra mesmo trimestre do ano anterior'


df['PIB'].pct_change(4)["2019":].plot(ax=ax, color='darkblue', kind='line')
ax.axhline(y=0, ls='--', color='black')

plt.suptitle(suptitle, color='black', weight = 'bold')
ax.set_title(title, color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. √öltimo dado dispon√≠vel: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
# ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

fig.savefig('./figs/PIB/PIB_YoY.png', dpi=300)
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/PIB_YoY.png]]

** Agropecu√°ria

#+BEGIN_SRC python :results graphics file :file ./figs/PIB/Agropecuaria.png
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Agropecuaria].pct_change().tail(4).plot(kind='bar', ax=ax, color='darkblue')

plt.suptitle('Agricultura', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)

ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. √öltimo dado dispon√≠vel: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

fig.savefig(
    './figs/PIB/Agropecuaria.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Agropecuaria.png]]

** Ind√∫stria

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/Industria.png
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Industria].pct_change().tail(4).plot(kind='bar', ax=ax)

plt.suptitle('Ind√∫stria', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)

ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. √öltimo dado dispon√≠vel: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
fig.savefig(
    './figs/PIB/Industria.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Industria.png]]


** Servi√ßos

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/Servicos.png
fig, ax = plt.subplots(figsize=(8,5))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Servicos].pct_change().tail(4).plot(kind='bar', ax=ax)
lgd = ax.legend(
    loc='center left',
    bbox_to_anchor=(1, 0.5)
)


plt.suptitle('Servi√ßos', color='black', weight = 'bold')

ax.axhline(y=0, color='gray', linestyle='--', lw=2)

ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. √öltimo dado dispon√≠vel: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
fig.savefig(
    './figs/PIB/Servicos.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Servicos.png]]

** Demanda

#+BEGIN_SRC python   :results graphics file :file ./figs/PIB/Demanda.png
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Demanda + ['PIB']].pct_change().tail(4).plot(kind='bar', ax=ax)

plt.suptitle('Demanda', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. √öltimo dado dispon√≠vel: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
fig.savefig(
    './figs/PIB/Demanda.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Demanda.png]]

** Oferta


#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/Oferta.png
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Oferta + ['PIB']].pct_change().tail(4).plot(kind='bar', ax=ax)

plt.suptitle('Oferta', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)
#ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. √öltimo dado dispon√≠vel: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
plt.close()
fig.savefig(
    './figs/PIB/Oferta.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Oferta.png]]


** Contribui√ß√£o para varia√ß√£o: Demanda

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/Contrib_Demanda.png
fig, ax = plt.subplots(figsize=(8,5))
ax2 = fig.add_axes([0.15,0.7,0.2,0.2])

df[Demanda].diff().apply(lambda x: x/(df["PIB"].shift())).tail(4).plot(
    kind = 'bar',
    stacked = True,
    ax = ax,
    color = (
        "tomato",
        "darkred",
        "darkslateblue",
        "tan",
        "khaki"
    ),
    width = 0.75,
    edgecolor='black'
)
plt.suptitle('Demanda', color='black', weight = 'bold')
ax.axhline(y=0, color='black', linestyle='-', lw=2)
#ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Contribui√ß√£o para varia√ß√£o do PIB', color='black')

ax.text(0.95, -0.125, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.125, 'Atualizado em {}. √öltimo dado dispon√≠vel: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
fig.savefig(
    './figs/PIB/Contrib_Demanda.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Contrib_Demanda.png]]

** Contribui√ß√£o para varia√ß√£o: Oferta

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/Contrib_Oferta.png
fig, ax = plt.subplots(1,1,figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


#df["PIB"].pct_change().tail(12).plot(ax = ax, kind = 'line', legend = True, color = 'black')
df[Oferta].diff().apply(lambda x: x/(df["VA"].shift())).tail(4).plot(
    kind = 'bar',
    stacked = True,
    ax = ax,
    color = (
        "green",
    #    "darkred",
        "darkslateblue",
        "tan",
    #    "khaki"
    ),
    cmap="Set1",
    width = 0.75,
    edgecolor='black'
)

plt.suptitle('Oferta', color='black', weight = 'bold')
ax.axhline(y=0, color='black', linestyle='-', lw=2)
#ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Contribui√ß√£o para varia√ß√£o do valor adicionado', color='black')

ax.text(0.95, -0.125, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.125, 'Atualizado em {}. √öltimo dado dispon√≠vel: {}'.format(dt.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
fig.savefig(
    './figs/PIB/Contrib_Oferta.png',
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
    )
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Contrib_Oferta.png]]


** Contribui√ß√£o para varia√ß√£o: Servi√ßos

#+BEGIN_SRC python  :results graphics file :file ./figs/PIB/Contrib_Servicos.png
fig, ax = plt.subplots(1, 1, figsize=(9, 4))
ax2 = fig.add_axes([0.15, 0.6, 0.2, 0.2])


# df["PIB"].pct_change().tail(12).plot(ax = ax, kind = 'line', legend = True, color = 'black')
df[Servicos].drop(["Total Servicos"], axis="columns").diff().apply(
    lambda x: x / (df["Total Servicos"].shift())
).tail(4).plot(
    kind="bar",
    stacked=True,
    ax=ax,
    color=(
        "green",
        "darkred",
        "darkslateblue",
        "tan",
        "khaki",
        "gray",
        "orange",
    ),
    cmap="Set1",
    width=0.75,
    edgecolor="black",
)

plt.suptitle("Servi√ßos", color="black", weight="bold")
ax.axhline(y=0, color="black", linestyle="-", lw=2)
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))


ax.set_title("Contribui√ß√£o para varia√ß√£o", color="black")

ax.text(
    0.95,
    -0.125,
    "Fonte: IBGE",
    verticalalignment="bottom",
    horizontalalignment="right",
    transform=ax.transAxes,
    color="black",
    fontsize=10,
)

ax.text(
    0.6,
    -0.125,
    "Atualizado em {}. √öltimo dado dispon√≠vel: {}".format(
        dt.now().strftime("%d/%m/%Y"), df.index[-1]
    ),
    verticalalignment="bottom",
    horizontalalignment="right",
    transform=ax.transAxes,
    color="black",
    fontsize=10,
)

sns.despine()
ax.tick_params(axis="x", colors="black")
ax.tick_params(axis="y", colors="black")
ax.yaxis.label.set_color("black")
ax.xaxis.label.set_color("black")
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: "{:.1%}".format(y)))
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")
fig.savefig(
    "./figs/PIB/Contrib_Servicos.png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Contrib_Servicos.png]]

** Acumulado no ano (sem ajuste)

*** Carregano dados :ignore:

#+BEGIN_SRC python :exports none
Colunas = [
    "Agropecuaria",
    "Industria Extrativa",
    "Industria de Transformacao",
    "Eletricidade e agua",
    "Construcao",
    "Total Industria",
    "Comercio",
    "Transporte, armazenagem\ne correio",
    "Informacao e\ncomunicacao",
    "Atividades Financeiras",
    "Atividades Imobiliarias",
    "Outras atividades",
    "ADM, defesa, etc",
    "Total Servicos",
    "VA",
    "Imposto",
    "PIB",
    "Consumo\ndas Familias",
    "Consumo\ndo Governo",
    "FBCF",
    "Exportacao",
    "Importacao"
]

Agropecuaria = ['Agropecuaria']

Industria = [
    "Industria Extrativa",
    "Industria de Transformacao",
    "Eletricidade e agua",
    "Construcao",
    "Total Industria"
]

Servicos = [
    "Comercio",
    "Transporte, armazenagem\ne correio",
    "Informacao e\ncomunicacao",
    "Atividades Financeiras",
    "Atividades Imobiliarias",
    "Outras atividades",
    "ADM, defesa, etc",
    "Total Servicos",
]

Demanda = [
    "Consumo\ndas Familias",
    "Consumo\ndo Governo",
    "FBCF",
    "Exportacao",
    "Importacao"
]

Oferta = [
    'Agropecuaria',
    "Total Industria",
    "Total Servicos",
]

df = pd.read_excel('./raw/ContasNacionais/Tab_Compl_CNT.xlsx', header=3, sheet_name='Acum. em 4 trimestres', index_col=0)
df.index = df.index.str.replace('.', 'Q').str.replace('IV', '4').str.replace('III', '3').str.replace('II', '2').str.replace('I', '1')
df.index = pd.PeriodIndex(df.index, freq='Q')
df.columns = Colunas
df["Importacao"] = -df["Importacao"]
df.index = df.index.to_timestamp()
#+END_SRC

#+RESULTS:
:results:
:end:

*** Servi√ßos

#+BEGIN_SRC python :results graphics file :file ./figs/PIB/Servicos_Acum.png
df = pd.read_excel('./raw/ContasNacionais/Tab_Compl_CNT.xlsx', header=3, sheet_name='Acum. em 4 trimestres', index_col=0)
df.index = df.index.str.replace('.', 'Q').str.replace('IV', '4').str.replace('III', '3').str.replace('II', '2').str.replace('I', '1')
df.index = pd.PeriodIndex(df.index, freq='Q')
df.columns = Colunas
df["Importacao"] = -df["Importacao"]
df.index = df.index.to_timestamp()
last = str(df.index.to_list()[-1]).split(' ')[0]
df = df[last:][Servicos].transpose().sort_values('2020-10-01', ascending=False)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Taxa (%) acumulada no ano em rela√ß√£o ao\nmesmo per√≠odo do ano anterior",
    ax=ax,
    lw=2.5,
    legend = False,
    kind = 'bar', edgecolor='black', width=.8,
)
ax.set_yticklabels(['{:,.0%}'.format(x/100) for x in ax.get_yticks()])
ax.axhline(y=0, ls='-', lw=1.0, color='black')

add_value_labels(ax)

ax2 = plt.axes([0.1375, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/PIB/Servicos_Acum" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Servicos_Acum.png]]

*** Servi√ßos (compara√ß√£o com ano anterior)

#+BEGIN_SRC python :results graphics file :file ./figs/PIB/Servicos_Acum_Comparativo.png
df = pd.read_excel('./raw/ContasNacionais/Tab_Compl_CNT.xlsx', header=3, sheet_name='Acum. em 4 trimestres', index_col=0)
df.index = df.index.str.replace('.', 'Q').str.replace('IV', '4').str.replace('III', '3').str.replace('II', '2').str.replace('I', '1')
df.index = pd.PeriodIndex(df.index, freq='Q')
df.columns = Colunas
df.index = df.index.to_timestamp()

last = str(df.index.to_list()[-1]).split(' ')[0]
previous = str(df.index.to_list()[-5]).split(' ')[0]
df = df.loc[[previous, last],:]
df = df[Servicos].transpose().sort_values('2020-10-01', ascending=False)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Taxa (%) acumulada no ano em rela√ß√£o ao\nmesmo per√≠odo do ano anterior",
    ax=ax,
    lw=2.5,
    legend = False,
    kind = 'bar', edgecolor='black', width=.8,
)
ax.set_yticklabels(['{:,.0%}'.format(x/100) for x in ax.get_yticks()])
ax.axhline(y=0, ls='-', lw=1.0, color='black')

add_value_labels(ax)

ax2 = plt.axes([0.1375, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/PIB/Servicos_Acum_Comparativo" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Servicos_Acum_Comparativo.png]]

*** Demanda

#+BEGIN_SRC python :results graphics file :file ./figs/PIB/Demanda_Acum.png
df = pd.read_excel('./raw/ContasNacionais/Tab_Compl_CNT.xlsx', header=3, sheet_name='Acum. em 4 trimestres', index_col=0)
df.index = df.index.str.replace('.', 'Q').str.replace('IV', '4').str.replace('III', '3').str.replace('II', '2').str.replace('I', '1')
df.index = pd.PeriodIndex(df.index, freq='Q')
df.columns = Colunas
# df["Importacao"] = -df["Importacao"]
df.index = df.index.to_timestamp()
last = str(df.index.to_list()[-1]).split(' ')[0]
df = df[last:][Demanda].transpose().sort_values('2020-10-01', ascending=False)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Taxa (%) acumulada no ano em rela√ß√£o ao\nmesmo per√≠odo do ano anterior",
    ax=ax,
    lw=2.5,
    legend = False,
    kind = 'bar', edgecolor='black', width=.8,
)
ax.set_yticklabels(['{:,.0%}'.format(x/100) for x in ax.get_yticks()])
ax.axhline(y=0, ls='-', lw=1.0, color='black')
ax2 = plt.axes([0.1375, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/PIB/Demanda_Acum" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Demanda_Acum.png]]

*** Demanda (compara√ß√£o com ano anterior)

#+BEGIN_SRC python :results graphics file :file ./figs/PIB/Demanda_Acum_Comparativo.png
df = pd.read_excel('./raw/ContasNacionais/Tab_Compl_CNT.xlsx', header=3, sheet_name='Acum. em 4 trimestres', index_col=0)
df.index = df.index.str.replace('.', 'Q').str.replace('IV', '4').str.replace('III', '3').str.replace('II', '2').str.replace('I', '1')
df.index = pd.PeriodIndex(df.index, freq='Q')
df.columns = Colunas
# df["Importacao"] = -df["Importacao"]
df.index = df.index.to_timestamp()
last = str(df.index.to_list()[-1]).split(' ')[0]
previous = str(df.index.to_list()[-5]).split(' ')[0]
df = df.loc[[previous, last],:]
df = df[Demanda].transpose().sort_values(last, ascending=False)

df.columns = [previous[:4], last[:4]]
fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Taxa (%) acumulada no ano em rela√ß√£o ao\nmesmo per√≠odo do ano anterior",
    ax=ax,
    lw=2.5,
    legend = False,
    kind = 'bar', edgecolor='black', width=.8,
    color = ('teal', 'darkred')
)
ax.legend()
ax.set_yticklabels(['{:,.0%}'.format(x/100) for x in ax.get_yticks()])
ax.axhline(y=0, ls='-', lw=1.0, color='black')
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

add_value_labels(ax)

ax2 = plt.axes([0.1375, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/PIB/Demanda_Acum_Comparativo" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/PIB/Demanda_Acum_Comparativo.png]]

* Cr√©dito
#+begin_src python
start_year = '2019-01-01'
#+end_src

#+RESULTS:
:results:
:end:

** Endividamento das fam√≠lias

#+BEGIN_SRC python :results graphics file :file ./figs/Credito/EndividamentoFamilias.png
titulo = "Endividamento das fam√≠lias\nTotal e Exceto cr√©dito habitacional"
porcentagem = True
unidade = "renda acum.\n√∫ltimos 12 meses"
df = pd.concat(
    [
        consulta_bc(19882, ["Total"]),
        consulta_bc(20400, ["Exceto cr√©dito habitacional"]),
    ],
    axis=1,
)
df = df[start_year:]
df.index.name = ""
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df[start_year:].plot(
    title=titulo,
    ax=ax,
    lw=2,
)
ax.axvline(
    x=corona_sp, color="black", ls="--", lw=1, label="In√≠cio isolamento\nsocial em SP"
)
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(["{:,.0f}".format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f"R$ {unidade}")
else:
    ax.set_yticklabels(["{:,.2%}".format(x / 100) for x in ax.get_yticks()])
    ax.set_ylabel(f"em % {unidade}")
ax2 = plt.axes([0.9, 0.6, 0.2, 0.2])


ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")


sns.despine()
plt.close()

fig.savefig(
    "./figs/Credito/EndividamentoFamilias" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Credito/EndividamentoFamilias.png]]


** Saldo Pessoal Jur√≠dica - N√≠vel
     
#+BEGIN_SRC python :results graphics file :file ./figs/Credito/SaldoPJ.png
titulo = "Saldo Pessoa jur√≠dica"
porcentagem=False
unidade="Milh√µes"
df = pd.concat(
    [
        consulta_bc(20543, ["Saldo Pessoa jur√≠dica livre"]),
        consulta_bc(20594, ["Saldo Pessoa jur√≠dica direcionados"]),
    ],
    axis=1,
)
df = df[start_year:]
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    lw=2, 
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='In√≠cio isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.2%}'.format(x/100) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.close()

fig.savefig(
    './figs/Credito/SaldoPJ' +   '.png',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
[[file:./figs/Credito/SaldoPJ.png]]



** Saldo Pessoa Jur√≠dica - em % do PIB
#+BEGIN_SRC python :results graphics file :file ./figs/Credito/SaldoPJ_PIB.png
titulo = "Saldo Pessoa jur√≠dica\nem % PIB"
porcentagem = True
unidade = "PIB"
df = pd.concat(
    [
        consulta_bc(20626, ["Recursos livres"]),
        consulta_bc(20629, ["Recursos direcionados"]),
    ],
    axis=1,
)
df = df[start_year:]
df.index.name = ""
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df[start_year:].plot(
    title=titulo,
    ax=ax,
    lw=2,
)
ax.axvline(
    x=corona_sp, color="black", ls="--", lw=1, label="In√≠cio isolamento\nsocial em SP"
)
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(["{:,.0f}".format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f"R$ {unidade}")
else:
    ax.set_yticklabels(["{:,.2%}".format(x / 100) for x in ax.get_yticks()])
    ax.set_ylabel(f"em % {unidade}")
ax2 = plt.axes([0.9, 0.6, 0.2, 0.2])


ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")


sns.despine()
plt.close()

fig.savefig(
    "./figs/Credito/SaldoPJ_PIB" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Credito/SaldoPJ_PIB.png]]

** Saldo Pessoa f√≠sica - N√≠vel

#+BEGIN_SRC python :results graphics file :file ./figs/Credito/SaldoPF.png
titulo = "Saldo Pessoa f√≠sica"
porcentagem = False
unidade = "Milh√µes"
df = pd.concat(
    [
        consulta_bc(20570, ["Saldo Pessoa f√≠sica livre"]),
        consulta_bc(20606, ["Saldo Pessoa f√≠sica direcionados"]),
    ],
    axis=1,
)
df = df[start_year:]
df.index.name = ""
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df[start_year:].plot(
    title=titulo,
    ax=ax,
    lw=2,
)
ax.axvline(
    x=corona_sp, color="black", ls="--", lw=1, label="In√≠cio isolamento\nsocial em SP"
)
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(["{:,.0f}".format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f"R$ {unidade}")
else:
    ax.set_yticklabels(["{:,.2%}".format(x / 100) for x in ax.get_yticks()])
    ax.set_ylabel(f"em % {unidade}")
ax2 = plt.axes([0.9, 0.6, 0.2, 0.2])


ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")


sns.despine()
plt.close()

fig.savefig(
    "./figs/Credito/SaldoPF" + ".png", dpi=300, bbox_inches="tight", pad_inches=0
)
#+END_SRC

#+RESULTS:
[[file:./figs/Credito/SaldoPF.png]]


** Saldo Pessoa f√≠sica - em % do PIB

#+BEGIN_SRC python :results graphics file :file ./figs/Credito/SaldoPF_PIB.png
titulo = "Saldo Pessoa f√≠sica\nem % PIB"
porcentagem = True
unidade = "PIB"
df = pd.concat(
    [
        consulta_bc(20627, ["Recursos livres"]),
        consulta_bc(20630, ["Recursos direcionados"]),
    ],
    axis=1,
)
df = df[start_year:]
df.index.name = ""
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df[start_year:].plot(
    title=titulo,
    ax=ax,
    lw=2,
)
ax.axvline(
    x=corona_sp, color="black", ls="--", lw=1, label="In√≠cio isolamento\nsocial em SP"
)
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(["{:,.0f}".format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f"R$ {unidade}")
else:
    ax.set_yticklabels(["{:,.2%}".format(x / 100) for x in ax.get_yticks()])
    ax.set_ylabel(f"em % {unidade}")
ax2 = plt.axes([0.9, 0.6, 0.2, 0.2])


ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")


sns.despine()
plt.close()

fig.savefig(
    "./figs/Credito/SaldoPF_PIB" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Credito/SaldoPF_PIB.png]]


** Cr√©dito ampliado em % do Total

#+BEGIN_SRC python :results graphics file :file ./figs/Credito/SaldoCreditoAmpliado_Total.png
titulo = "Saldo Cr√©dito Ampliado\nem % do Total"
porcentagem=True
unidade="do Total"
df = pd.concat(
    [
        consulta_bc(28183, ["Setor n√£o financeiro"]),
        consulta_bc(28196, ["Governo geral"]),
        consulta_bc(28203, ["Empresas e Fam√≠lias"]),
    ],
    axis=1,
)
df = df[start_year:]
df = df.apply(pd.to_numeric, errors='coerce')
df["Total"] = df.sum(axis=1)
df = df.apply(lambda x: x/df["Total"]).drop(["Total"], axis='columns')

df.index.name = ''


fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    kind='bar', stacked=True, edgecolor='black',
    lw=2,
)
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
#ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='In√≠cio isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else:
    ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.close()

fig.savefig(
    './figs/Credito/SaldoCreditoAmpliado_Total' + '.png',
    dpi = 300,
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
[[file:./figs/Credito/SaldoCreditoAmpliado_Total.png]]

** Indicadores de aprova√ß√£o de cr√©dito

#+BEGIN_SRC python :results graphics file :file ./figs/Credito/PTC.png
titulo = "Indicadores de aprova√ß√£o de cr√©dito\nAprova√ß√µes Esperadas - Observadas"
porcentagem=False
unidade="Pontos"
df = pd.concat(
    [
        consulta_bc(21396, ["Grandes - Esperadas"]),
        consulta_bc(21397, ["Grandes - Observadas"]),
        consulta_bc(21398, ["Micro - Esperadas"]),
        consulta_bc(21399, ["Micro - Observadas"]),
        consulta_bc(21400, ["Consumo - Esperadas"]),
        consulta_bc(21401, ["Consumo - Observadas"]),
        consulta_bc(21402, ["Habitacional - Esperadas"]),
        consulta_bc(21403, ["Habitacional - Observadas"]),
    ],
    axis=1,
)
df["Grandes Empresas"] = df["Grandes - Esperadas"] - df["Grandes - Observadas"]
df["Micro, Pequenas e M√©dias Empresas"] = df["Micro - Esperadas"] - df["Micro - Observadas"]
df["Consumo"] = df["Consumo - Esperadas"] - df["Consumo - Observadas"]
df["Habitacional"] = df["Habitacional - Esperadas"] - df["Habitacional - Observadas"]
df = df[["Grandes Empresas", "Micro, Pequenas e M√©dias Empresas", "Consumo", "Habitacional"]]

df = interpolator(df)
df = df[start_year:]

df.index.name = ''

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = titulo,
    ax = ax,
    # kind='bar', stacked=True, edgecolor='black',
    lw=2,
)
# ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
ax.set_ylabel('Esperadas - Observadas (Pontos)')
ax.axhline(y = 0, color='black', ls='-', lw=1,)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='In√≠cio isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
# if porcentagem == False:
#     ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
#     ax.set_ylabel(f'{unidade}')
# else:
#     ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
#     ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.close()

fig.savefig(
    './figs/Credito/PTC' + '.png',
    dpi = 300,
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
[[file:./figs/Credito/PTC.png]]

** Recolhimentos compuls√≥rios de institui√ß√µes financeiras

#+BEGIN_SRC python :results graphics file :file ./figs/Credito/Recolhimentos_Total.png
titulo = "Recolhimentos compuls√≥rios de institui√ß√µes financeira\nSaldo Total"
porcentagem=False
unidade="u.m.c (mil)"

df = consulta_bc(17633, ["Saldo Total"])

df = df[start_year:]
df = df.apply(pd.to_numeric, errors='coerce')

df.index.name = ''


fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    lw=2,
)
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='In√≠cio isolamento\nsocial em SP')
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else:
    ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.135,0.135,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.close()

fig.savefig(
    './figs/Credito/Recolhimentos_Total' + '.png',
    dpi = 300,
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
[[file:./figs/Credito/Recolhimentos_Total.png]]

* √çndices de atividade setoriais


** Pesquisa Mensal do Com√©rcio (PMC)

#+BEGIN_SRC python  :file ./figs/Setoriais/PMC_IBGE.png :results graphics file
df = pd.concat(
    [
        consulta_bc(28473, ["Total"]),
        consulta_bc(28474, ["Combust√≠veis e lubrificantes"]),
        consulta_bc(28475, ["Hipermercados, supermercados, produtos aliment√≠cios, bebidas e fumo"]),
        consulta_bc(28477, ["Tecido, vestu√°rio e cal√ßado"]),
        consulta_bc(28478, ["M√≥veis e eletrodom√©sticos - Brasil - Dados dessazonalizados"]),
        consulta_bc(28479, ["Autom√≥veis, motocicletas, partes e pe√ßas"]),
        consulta_bc(28480, ["Artigos farmac√™uticos, m√©dicos, ortop√©dicos, perfumaria e cosm√©ticos"]),
        consulta_bc(28481, ["Livros, jornais, revistas e papelaria"]),
        consulta_bc(28482, ["Equipamentos e materiais para escrit√≥rio e comunica√ß√£o"]),
        consulta_bc(28483, ["Outros artigos de uso pessoal e dom√©stico"]),
        consulta_bc(28484, ["Material de constru√ß√£o"]),
        consulta_bc(28485, ["Com√©rcio ampliado"]),
    ],
    axis=1,
)
df.index.name = ''
for col in df:
    df[col] = df[col].apply(lambda x: (100*x)/df[col][base])

df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = f"Pesquisa Mensal do Com√©rcio (PMC)\nVolume de Vendas Dessazonalizado\n{base} = 100",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='In√≠cio isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.close()

fig.savefig(
    './figs/Setoriais/PMC_IBGE' + '.png',
    dpi = 300,
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
[[file:./figs/Setoriais/PMC_IBGE.png]]


** Pesquisa Industrial Mensal (PIM)

#+BEGIN_SRC python  :file ./figs/Setoriais/PIM_IBGE.png :results graphics file
df = pd.concat(
    [
        consulta_bc(28503, ["Geral"]),
        consulta_bc(28504, ["Extrativa mineral"]),
        consulta_bc(28505, ["Ind√∫stria de transforma√ß√£o"]),
        consulta_bc(28506, ["Bens de capital"]),
        consulta_bc(28507, ["Bens intermedi√°rios"]),
        consulta_bc(28508, ["Bens de consumo"]),
        consulta_bc(28509, ["Bens de consumo dur√°veis"]),
        consulta_bc(28510, ["Semidur√°veis e n√£o dur√°veis"]),
        consulta_bc(28511, ["Insumos da constru√ß√£o civil"]),
    ],
    axis=1,
)
df.index.name = ""
for col in df:
    df[col] = df[col].apply(lambda x: (100 * x) / df[col][base])

df = df[start_year:]
df = interpolator(df)


fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Pesquisa Industrial Mensal (PIM)\nSe√ß√µes de atividades desazonalizadas\n{base} = 100",
    ax=ax,
    lw=2.5,
)
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label="In√≠cio isolamento em SP")
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/Setoriais/PIM_IBGE" + ".png", dpi=300, bbox_inches="tight", pad_inches=0
)
#+END_SRC

#+RESULTS:
[[file:./figs/Setoriais/PIM_IBGE.png]]


** Pesquisa Mensal de Servi√ßos (PMS)
*** Receita nominal sem ajuste sazonal
#+BEGIN_SRC python  :results graphics file :file ./figs/Setoriais/PMS_IBGE.png
file_name = "PMS_IBGE"
df = pd.concat(
    [
        consulta_bc(21637, ["Total"]),
        consulta_bc(21638, ["Prestados √†s fam√≠lias"]),
        consulta_bc(21639, ["Informa√ß√£o e comunica√ß√£o"]),
        consulta_bc(21640, ["Profissionais, Administrativos e Complementares"]),
        consulta_bc(21641, ["Transportes, Servi√ßos auxiliares e Correio"]),
        consulta_bc(21642, ["Outros"]),
    ],
    axis=1,
)
df.index.name = ""

for col in df:
    df[col] = df[col].apply(lambda x: (100 * x) / df[col].loc[base])

df = df[start_year:]
df = interpolator(df)
df.columns = [
    "Total Geral",
    "Servi√ßos prestados √†s Fam√≠lias",
    "Servi√ßos de informa√ß√£o e comunica√ß√£o",
    "Servi√ßos Profissionais, Administrativos e Complementares",
    "Transportes, Servi√ßos auxiliares aos transportes e Correio",
    "Outros servi√ßos",
]

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Pesquisa Mensal de Servi√ßos (PMS)\nReceita nominal\n{base} = 100",
    ax=ax,
    lw=2.5,
)
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label="In√≠cio isolamento em SP")
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/Setoriais/PMS_IBGE" + ".png", dpi=300, bbox_inches="tight", pad_inches=0
)
#+END_SRC

#+RESULTS:
[[file:./figs/Setoriais/PMS_IBGE.png]]

*** Volume com ajuste sazonal


#+begin_src R :exports none
df <- get_sidra(
  api = "/t/6443/n1/all/v/8677/p/all/c11046/40312/c12355/31399,31426,106869,106874,106876,107071/d/v8677%201"
) %>%
  select( "M√™s (C√≥digo)", "Atividades de servi√ßos", "Valor") %>%
  mutate(Data =  paste0(`M√™s (C√≥digo)`, "01")) %>%
  mutate(Data = as.Date(Data, format="%Y%m%d")) %>%
  select(-c(`M√™s (C√≥digo)`)) %>%
  pivot_wider(names_from = "Atividades de servi√ßos", values_from = Valor)

names(df) <- c(
  "Data",
  "Profissionais, Administrativos e Complementares",
  "Outros",
  "Prestados √†s fam√≠lias",
  "Informa√ß√£o e comunica√ß√£o",
  "Transportes, Servi√ßos auxiliares e Correio",
  "Total"
  )
write.csv(
  df,
  './clean/IBGE/PMS_volume_dessazonalizada.csv',
  row.names=FALSE
)
#+end_src

#+RESULTS:
:results:
All others arguments are desconsidered when 'api' is informed
:end:

#+BEGIN_SRC python  :results graphics file :file ./figs/Setoriais/PMS_vol_dessazonalizada.png
df = pd.read_csv(
    "./clean/IBGE/PMS_volume_dessazonalizada.csv", index_col="Data", parse_dates=True
)

df.index.name = ""

for col in df:
    df[col] = df[col].apply(lambda x: (100 * x) / df[col].loc[base])

df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Pesquisa Mensal de Servi√ßos (PMS)\n√çndice de Volume de servi√ßos dessazonalizado\n{base} = 100",
    ax=ax,
    lw=2.5,
)
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label="In√≠cio isolamento em SP")
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/Setoriais/PMS_vol_dessazonalizada" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Setoriais/PMS_vol_dessazonalizada.png]]

*** Volume com ajuste sazonal (em rela√ß√£o ao m√™s anterior)


#+begin_src R :exports none
df <- get_sidra(
  api = "/t/6443/n1/all/v/8677/p/all/c11046/40312/c12355/31399,31426,106869,106874,106876,107071/d/v8677%201"
) %>%
  select( "M√™s (C√≥digo)", "Atividades de servi√ßos", "Valor") %>%
  mutate(Data =  paste0(`M√™s (C√≥digo)`, "01")) %>%
  mutate(Data = as.Date(Data, format="%Y%m%d")) %>%
  select(-c(`M√™s (C√≥digo)`)) %>%
  pivot_wider(names_from = "Atividades de servi√ßos", values_from = Valor)

names(df) <- c(
  "Data",
  "Profissionais, Administrativos e Complementares",
  "Outros",
  "Prestados √†s fam√≠lias",
  "Informa√ß√£o e comunica√ß√£o",
  "Transportes, Servi√ßos auxiliares e Correio",
  "Total"
  )
write.csv(
  df,
  './clean/IBGE/PMS_volume_dessazonalizada.csv',
  row.names=FALSE
)
#+end_src

#+RESULTS:
:results:
All others arguments are desconsidered when 'api' is informed
:end:

#+BEGIN_SRC python  :results graphics file :file ./figs/Setoriais/PMS_vol_dessazonalizada_diff.png
df = pd.read_csv(
    "./clean/IBGE/PMS_volume_dessazonalizada.csv", index_col="Data", parse_dates=True
)

df.index.name = ""

for col in df:
    df[col] = df[col].apply(lambda x: (100 * x) / df[col].loc[base])

df = df["2020-01-01":]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df.diff().plot(
    title=f"Pesquisa Mensal de Servi√ßos (PMS)\n√çndice de Volume de servi√ßos dessazonalizado\nComparado ao m√™s anterior",
    ax=ax,
    lw=2.5,
)
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label="In√≠cio isolamento em SP")
ax.axhline(y=0, color="black", ls="-", lw=1)
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/Setoriais/PMS_vol_dessazonalizada_diff" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Setoriais/PMS_vol_dessazonalizada_diff.png]]

* Emprego

** Rendimento m√©dio real habitual das pessoas ocupadas


#+BEGIN_SRC python  :results graphics file :file ./figs/Emprego/RMHPO.png
df = pd.concat(
    [
        consulta_bc(24383, ["Com carteira"]),
        consulta_bc(24384, ["Sem carteira"]),
        consulta_bc(24385, ["Setor privado"]),
        consulta_bc(24386, ["Setor p√∫blico"]),
        consulta_bc(24387, ["Conta pr√≥pria"]),
        consulta_bc(24388, ["Empregadores"]),
    ],
    axis=1,
)

df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Rendimento m√©dio real habitual\ndas pessoas ocupadas - PNADC",
    ax=ax,
    lw=2.5,
)
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label="In√≠cio isolamento em SP")
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/Emprego/RMHPO" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Emprego/RMHPO.png]]

** Massa de rendimento real efetiva e habitual de todos os trabalhos

#+BEGIN_SRC python  :results graphics file :file ./figs/Emprego/MRR_Efetiva_Habitual.png
df = pd.concat(
    [
        consulta_bc(28544, ["Efetiva"]),
        consulta_bc(28545, ["Habitual"]),
    ],
    axis=1,
)

df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Massa de rendimento real efetiva e\nhabitual de todos os trabalhos",
    ax=ax,
    lw=2.5,
)
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label="In√≠cio isolamento em SP")
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/Emprego/MRR_Efetiva_Habitual" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Emprego/MRR_Efetiva_Habitual.png]]

** Massa Salarial Ampliada Dispon√≠vel - PNADC

#+BEGIN_SRC python  :results graphics file :file ./figs/Emprego/MSAD.png
df = consulta_bc(22079, ["MSAD - PNADC"])

df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Massa Salarial Ampliada Dispon√≠vel PNADC",
    ax=ax,
    lw=2.5,
)
ax.set_yticklabels(["{:,.2f}".format(x / 1000) for x in ax.get_yticks()])
ax.set_ylabel('R$ Bilh√µes')
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label="In√≠cio isolamento em SP")
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/Emprego/MSAD" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Emprego/MSAD.png]]

** Rendimento habitual m√©dio por atividade


#+BEGIN_SRC python   :tangle ./codes/pnad.py :eval no
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Mensal RHM Setor Real",
    skiprows = 11,
    usecols = "A:K",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Rendimento habitual m√©dio por atividade",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='In√≠cio isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.close()

fig.savefig(
    image_path + file_path.strip("/")[-1] + "RHM_Setor" + "_" + '.png',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

** N√∫mero de horas trabalhadas - ind√∫stria de transforma√ß√£o

#+BEGIN_SRC python  :results graphics file :file ./figs/Emprego/Horas_Transformacao.png
df = consulta_bc(24348, ["Ind√∫stria de transforma√ß√£o"])

df = rebase(df, base='2020-01-01')
df = df['2019-01-01':]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"N√∫mero de horas trabalhadas - Dados dessazonalizados\nJan/2020 = 100",
    ax=ax,
    lw=2.5,
)
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label="In√≠cio isolamento em SP")
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/Emprego/Horas_Transformacao" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Emprego/Horas_Transformacao.png]]

** Novo CAGED  - Por atividade (dados dessazonalizados)

#+BEGIN_SRC python :results graphics file :file ./figs/Emprego/NovoCaged_Atividade.png
df = pd.concat(
    [
        # consulta_bc(28784, ["Total"]),
        consulta_bc(28785, ["Agropecu√°ria"]),
        consulta_bc(28786, ["Ind√∫strias extrativas"]),
        consulta_bc(28787, ["Ind√∫strias de transforma√ß√£o"]),
        # consulta_bc(28788, ["SIUP"]),
        # consulta_bc(28789, ["Eletricidade e g√°s"]),
        # consulta_bc(28790, ["√Ågua, esgoto, atividades de\ngest√£o de res√≠duos e descontamina√ß√£o"]),
        consulta_bc(28791, ["Constru√ß√£o"]),
        consulta_bc(28792, ["Com√©rcio"]),
        consulta_bc(28793, ["Servi√ßos"]),
        # consulta_bc(28794, ["Transporte, armazenamento e correios"]),
        # consulta_bc(28795, ["Alojamento e alimenta√ß√£o"]),
        # consulta_bc(28796, ["Informa√ß√£o e comunica√ß√£o"]),
        # consulta_bc(28797, ["Atividades financeiras e seguros"]),
        # consulta_bc(28798, ["Atividades imobili√°rias"]),
        # consulta_bc(28799, ["Atividades profissionais, cient√≠ficas e t√©cnicas"]),
        # consulta_bc(28800, ["Atividades administrativas e servi√ßos complementares"]),
        # consulta_bc(28801, ["Administra√ß√£o p√∫blica, defesa e seguridade social"]),
        consulta_bc(28802, ["Educa√ß√£o"]),
        consulta_bc(28803, ["Sa√∫de e servi√ßos sociais"]),
        # consulta_bc(28804, ["Outras atividades de servi√ßos"]),
    ],
    axis = 1
)
df.index.name = ''
df = df['2019':]

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Novo Caged por atividade - Dados dessazonalizados",
    ax = ax,
    lw = 1.5,
    edgecolor = 'black',
    kind = 'bar', stacked = True, width=0.9
)



ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([.9,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.close()

fig.savefig(
    './figs/Emprego/NovoCaged_Atividade.png',
    dpi = 300,
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
[[file:./figs/Emprego/NovoCaged_Atividade.png]]



** Taxa de desocupa√ß√£o

#+BEGIN_SRC python  :results graphics file :file ./figs/Emprego/TaxaDesocupacao.png
df = consulta_bc(24369, ["Taxa de desocupa√ß√£o - PNADC"])


df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Taxa de desocupa√ß√£o\nPNADC (em %)",
    ax=ax,
    lw=2.5,
)
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label="In√≠cio isolamento em SP")
ax.legend(loc="center left", bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/Emprego/TaxaDesocupacao" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/Emprego/TaxaDesocupacao.png]]


** Desalentados e subocupados :noexport:

#+BEGIN_SRC python   :tangle ./codes/pnad.py :eval no
var = "Desalentados_Subocupados"
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Dessaz",
    skiprows = 11,
    usecols = "A,D,S,T",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
df.columns = [
    "For√ßa de trabalho",
    "Subocupados",
    "Desalentados"
]
df = df.apply(pd.to_numeric, errors='coerce')
df["Taxa de desalentados"] = df["Desalentados"]/df["For√ßa de trabalho"]
df["Taxa de Subocupados por \ninsufici√™ncia de horas trabalhadas"] = df["Subocupados"]/df["For√ßa de trabalho"]
df = df[start_year:]
df = df[["Taxa de desalentados", "Taxa de Subocupados por \ninsufici√™ncia de horas trabalhadas"]]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Taxa de desalentados e subocupatos\n(em % da for√ßa de trabalho)",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='In√≠cio isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.close()

fig.savefig(
    image_path + file_path.strip("/")[-1] + var.replace(" ", "_") + "_" + '.png',
    dpi = 300,
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

* PNAD-COVID
** R trial
#+begin_src R :eval no
library(dplyr)
library(srvyr)
library(readr)
library(ggplot2)
library(Cairo)
library(cowplot)
library(magick)

logo_file <- './figs/Cecon_Logo.png'

pnad_covid <- read_csv("./raw/PNAD_COVID/PNAD_COVID_112020.csv", col_types = cols(.default = "d"))
mes <- "Novembro"
# ligando Pesos e filtrando Salvador
pnad_covid <- pnad_covid %>%
    as_survey_design(
        ids = UPA,
        strata = Estrato,
        weights = V1032,
        nest = TRUE
        )


# Criando colunas com Vari√°veis
pnad_covid <- pnad_covid %>% mutate(one = 1,
                                            Sexo = ifelse(A003 == 1, "Homem", "Mulher"),
                                            Idade = case_when(
                                                A002 %in% 15:24 ~ "15-24",
                                                A002 %in% 25:34 ~ "25-34",
                                                A002 %in% 35:49 ~ "35-49",
                                                A002 %in% 50:64 ~ "50-64",
                                                A002 > 64 ~ "65+"),
                                            Cor = case_when(
                                                A004 == 1 ~ "Branca",
                                                A004 == 2 ~ "Preta",
                                                A004 == 4 ~ "Parda"),
                                            Escolaridade = factor(case_when(
                                                A005 %in% 1:2 ~ "Sem Instru√ß√£o ou Fundamental Incompleto",
                                                A005 %in% 3:4 ~ "Fundamental completo ou M√©dio Incompleto",
                                                A005 %in% 5:6 ~ "M√©dio completo ou Superior Incompleto",
                                                A005 == 7 ~ "Superior completo",
                                                A005 == 8 ~ "P√≥s-gradua√ß√£o"),
                                                levels = c( "Sem Instru√ß√£o ou Fundamental Incompleto",
                                                            "Fundamental completo ou M√©dio Incompleto",
                                                            "M√©dio completo ou Superior Incompleto",
                                                            "Superior completo",
                                                            "P√≥s-gradua√ß√£o")),
                                            Tipo_emprego = factor(case_when(
                                                C007 == 1 ~ "Trabalhador dom√©stico (empregado dom√©stico, cuidados, bab√°)",
                                                C007 == 2 ~ "Militar",
                                                C007 == 3 ~ "Policial ou Bombeiro",
                                                C007 == 4 ~ "Setor privado",
                                                C007 == 5 ~ "Setor p√∫blico",
                                                C007 == 6 ~ "Empregador",
                                                C007 == 7 ~ "Aut√¥nomo (Conta pr√≥pria)"),
                                                levels = c( "Trabalhador dom√©stico (empregado dom√©stico, cuidados, bab√°)",
                                                            "Militar",
                                                            "Policial ou Bombeiro",
                                                            "Setor privado",
                                                            "Setor p√∫blico",
                                                            "Empregador",
                                                            "Aut√¥nomo (Conta pr√≥pria)")),
                                            Faixa_salario = factor(case_when(
                                                C01012 <= 1044 ~ "Menos de um sal√°rio m√≠nimo",
                                                C01012 %in% c(1045:2090) ~ "Entre 1 e 2",
                                                C01012 %in% c(2091:3135) ~ "Entre 2 e 3",
                                                C01012 %in% c(3136:4180) ~ "Entre 3 e 4",
                                                C01012 %in% c(4181:5225) ~ "Entre 4 e 5",
                                                C01012 >= 5226 ~ "Mais de 5"),
                                                levels = c("Menos de um sal√°rio m√≠nimo",
                                                           "Entre 1 e 2",
                                                           "Entre 2 e 3",
                                                           "Entre 3 e 4",
                                                           "Entre 4 e 5",
                                                           "Mais de 5")),
                                            domicilio_situacao = factor(case_when(
                                                F001 == 1 ~ "Pr√≥prio - j√° pago",
                                                F001 == 2 ~ "Pr√≥prio - ainda pagando" ,
                                                F001 == 3 ~ "Alugado",
                                                F001 %in% 4:6 ~ "Cedido (Por empregador, Familiar ou outro)"),
                                                levels = c("Pr√≥prio - j√° pago",
                                                           "Pr√≥prio - ainda pagando",
                                                           "Alugado",
                                                           "Cedido (Por empregador, Familiar ou outro)")),
                                            home_office = ifelse(C013 == 1, "Home Office", "Presencial"),
                                            auxilio_emergencial = ifelse(D0051 == 1, "Aux√≠lio", "Sem aux√≠lio")
)


############### Home office - Por sexo e cor ################### Criando dataset para conferir pessoas em Home Office
df <- pnad_covid %>%
    group_by(Sexo, Cor) %>%
    summarise(
        home_office = survey_total(C013 == 1, na.rm = TRUE),
        mao_de_obra = survey_total(C001 == 1, na.rm = TRUE)) %>%
    mutate(trab_home_office = (home_office/mao_de_obra)*100) %>%
    drop_na()# gr√°fico
fig <- ggplot(df, aes(fill = Cor, y = trab_home_office, x = Sexo)) +
    geom_bar(position = "dodge", stat = "identity") +
    geom_text(aes(label=sprintf("%1.2f%%",trab_home_office)),size = 3, position =position_dodge(width=0.9),
              vjust=-0.5, color = 'black',fontface='bold') +
    theme_classic() +
    theme(axis.title.x = element_text(colour = "black"),
          axis.title.y = element_text(colour = "black"),
          axis.text.y = element_text(face="bold", color="#000000",
                                     size=10),
          axis.line = element_line(colour = "black",
                                   size = 1, linetype = "solid"),
          axis.text=element_text(size=6, face="bold"),
          axis.text.x = element_text(face="bold", color="#000000", size=10),
          plot.title = element_text(colour = "black", size = 17, hjust=0.5),
          legend.position = "bottom", legend.background = element_rect(fill="ghostwhite", size=0.7, linetype="blank")) +
    labs(x = "Sexo", fill = "Cor/Ra√ßa: ", caption = "Fonte: Microdados da Pnad Covid19 - IBGE. Novembro 2020.",
         title = "Pessoas em home office, por cor/ra√ßa e sexo") +
    scale_fill_manual(values = c("#00b894","#ff7675","#0984e3","#6c5ce7")) +
    scale_y_discrete(limits=factor(0:100), breaks = c(0,10,20,30,40,50,60,70,80,90,100), name = "Percentual (%)")

fig<- ggdraw(fig) +
    draw_image(logo_file, x = .975, y = .975, hjust = 1, vjust = 1, width = 0.25, height = 0.2)
# Salvando
ggsave(plot = fig, "./figs/PNAD_COVID/home_sexo_cor.png",
       width = 10, height = 5, dpi = 120, units = "in",type = "cairo")

#+end_src

** Pend√™ncias :noexport:
*** TODO Incluir logos
** Home office - Por sexo e cor




[[./figs/PNAD_COVID/home_sexo_cor.png]]

** Home office - Por Cor e Escolaridade
[[./figs/PNAD_COVID/home_edu_cor.png]]
** Home office - Por Cor e Idade
[[./figs/PNAD_COVID/home_sexo_idade.png]]

** Home office - Por Trabalho
[[./figs/PNAD_COVID/home_emprego.png]]

** Home office - Por faixa salarial e cor
[[./figs/PNAD_COVID/home_renda.png]]
** Auxilio - Faixa Salarial
[[./figs/PNAD_COVID/auxilio_renda.png]]
** Auxilio - Por tipo do domicilio
[[./figs/PNAD_COVID/auxilio_domicilio.png]]
** Auxilio - Sexo e Cor
[[./figs/PNAD_COVID/auxilio_cor_sexo.png]]


* Relat√≥rio do Tesouro :noexport:



* IMF Fiscal Monitor
** Medidas fiscais em % do PIB

#+BEGIN_SRC python :results graphics file :file ./figs/IMF/FiscalMonitor_Covid.png
df = pd.read_excel(
    './raw/IMF/fiscal-monitor-database-oct-2020-for-webpage.xlsx',
    sheet_name='Summary.Global',
    index_col=1,
    skiprows=[0,1,2,]
)
df = df.loc[[
    # 'G20: Emerging markets',
    'Argentina',
    'Brazil',
    'China',
    'India',
    'Indonesia',
    'Mexico',
    'Russia',
    'Saudi Arabia',
    'South Africa'
],:].copy()
df = df[[
    'Above the line measures',
    'Unnamed: 3',
    'Unnamed: 4',
    'Above the line measures.1',
    'Unnamed: 15',
    'Unnamed: 16',
]]

df.columns = [
    'Gastos adicionais totais',
    'Setor de sa√∫de totais',
    'Outros setores totais',
    'Gastos adicionais',
    'Setor de sa√∫de',
    'Outros setores',
]
df.index.name = 'G20 - Pa√≠ses Emergentes'
df = df.sort_values(
    'Gastos adicionais',
    ascending=False
)
fig, ax = plt.subplots(figsize=(8, 5))
df[[
    # "Gastos adicionais",
    "Setor de sa√∫de",
    "Outros setores",
]].plot(
    title=f"Resumo das medidas fiscais dos pa√≠ses emergentes\nem resposta √† pandemia COVID-19 em % do PIB",
    ax=ax,
    lw=2.5,
    kind = 'bar', edgecolor='black', width=.8,
)
ax.legend(
    # loc="center left", bbox_to_anchor=(1, 0.5)
)
ax.set_yticklabels(['{:,.0%}'.format(x/100) for x in ax.get_yticks()])
ax2 = plt.axes([0.675, 0.55, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/IMF/FiscalMonitor_Covid" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/IMF/FiscalMonitor_Covid.png]]

** Medidas fiscais em % do PIB: Setor de sa√∫de/Outros setores

#+BEGIN_SRC python :results graphics file :file ./figs/IMF/FiscalMonitor_Covid_ratio.png
df = pd.read_excel(
    './raw/IMF/fiscal-monitor-database-oct-2020-for-webpage.xlsx',
    sheet_name='Summary.Global',
    index_col=1,
    skiprows=[0,1,2,]
)
df = df.loc[[
    # 'G20: Emerging markets',
    'Argentina',
    'Brazil',
    'China',
    'India',
    'Indonesia',
    'Mexico',
    'Russia',
    'Saudi Arabia',
    'South Africa'
],:].copy()
df = df[[
    'Above the line measures',
    'Unnamed: 3',
    'Unnamed: 4',
    'Above the line measures.1',
    'Unnamed: 15',
    'Unnamed: 16',
]]

df.columns = [
    'Gastos adicionais totais',
    'Setor de sa√∫de totais',
    'Outros setores totais',
    'Gastos adicionais',
    'Setor de sa√∫de',
    'Outros setores',
]
df.index.name = 'G20 - Pa√≠ses Emergentes'

df["Sa√∫de/Outros setores"] = df["Setor de sa√∫de"]/df["Outros setores"]

df = df.sort_values(
    'Sa√∫de/Outros setores',
    ascending=False
)
fig, ax = plt.subplots(figsize=(8, 5))
df[[
    "Sa√∫de/Outros setores"
]].plot(
    title=f"Raz√£o entre gastos com sa√∫de e outros setores\nem resposta √† pandemia COVID-19",
    ax=ax,
    lw=2.5,
    kind = 'bar', edgecolor='black', width=.8,
)
ax.legend(
    # loc="center left", bbox_to_anchor=(1, 0.5)
)
ax.set_yticklabels(['{:,.0%}'.format(x/100) for x in ax.get_yticks()])
ax2 = plt.axes([0.675, 0.55, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/IMF/FiscalMonitor_Covid_ratio" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

** Medidas fiscais em % do PIB: Setor de sa√∫de/Total

#+BEGIN_SRC python :results graphics file :file ./figs/IMF/FiscalMonitor_Covid_total.png
df = pd.read_excel(
    './raw/IMF/fiscal-monitor-database-oct-2020-for-webpage.xlsx',
    sheet_name='Summary.Global',
    index_col=1,
    skiprows=[0,1,2,]
)
df = df.loc[[
    # 'G20: Emerging markets',
    'Argentina',
    'Brazil',
    'China',
    'India',
    'Indonesia',
    'Mexico',
    'Russia',
    'Saudi Arabia',
    'South Africa'
],:].copy()
df = df[[
    'Above the line measures',
    'Unnamed: 3',
    'Unnamed: 4',
    'Above the line measures.1',
    'Unnamed: 15',
    'Unnamed: 16',
]]

df.columns = [
    'Gastos adicionais totais',
    'Setor de sa√∫de totais',
    'Outros setores totais',
    'Gastos adicionais',
    'Setor de sa√∫de',
    'Outros setores',
]
df.index.name = 'G20 - Pa√≠ses Emergentes'

df["Sa√∫de/Gastos adicionais"] = df["Setor de sa√∫de"]/df["Gastos adicionais"]

df = df.sort_values(
    'Sa√∫de/Gastos adicionais',
    ascending=False
)
fig, ax = plt.subplots(figsize=(8, 5))
df[[
    "Sa√∫de/Gastos adicionais"
]].plot(
    title=f"Raz√£o entre gastos com sa√∫de e total dos gastos adicionais\nem resposta √† pandemia COVID-19",
    ax=ax,
    lw=2.5,
    kind = 'bar', edgecolor='black', width=.8,
)
ax.legend(
    # loc="center left", bbox_to_anchor=(1, 0.5)
)
ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
ax2 = plt.axes([0.675, 0.55, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
plt.close()

fig.savefig(
    "./figs/IMF/FiscalMonitor_Covid_total" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
#+END_SRC

#+RESULTS:
[[file:./figs/IMF/FiscalMonitor_Covid_total.png]]

* World Economic outlook


** GDP vs Lockdown
#+NAME: IMF_fig_1
#+CAPTION: GDP Forecast Errors in 2020:H1 and Lockdown Stringency
|---------+--------------------+---------------------|
| Country | GDP Forecast Error | Lockdown Stringency |
|---------+--------------------+---------------------|
| AUS     | -4,54              | 37,21               |
| AUT     | -9,11              | 37,13               |
| BEL     | -9,65              | 41,34               |
| BRA     | -8,71              | 44,01               |
| CAN     | -8,81              | 40,92               |
| CHL     | -5,71              | 41,76               |
| CHN     | -7,82              | 62,36               |
| COL     | -10,70             | 49,59               |
| HRV     | -9,36              | 40,25               |
| CZE     | -8,87              | 34,38               |
| DNK     | -6,03              | 39,22               |
| EST     | -6,54              | 31,58               |
| FIN     | -5,24              | 28,49               |
| FRA     | -13,44             | 48,72               |
| DEU     | -7,04              | 35,39               |
| GRC     | -10,79             | 39,91               |
| HKG     | -4,45              | 43,62               |
| HUN     | -8,91              | 38,69               |
| IND     | -15,70             | 51,69               |
| IDN     | -6,09              | 42,06               |
| IRL     | -3,48              | 45,59               |
| ISR     | -6,44              | 49,81               |
| ITA     | -11,99             | 51,65               |
| JPN     | -6,27              | 24,21               |
| KOR     | -3,02              | 39,64               |
| LVA     | -7,49              | 33,94               |
| LTU     | -3,51              | 40,30               |
| MYS     | -12,54             | 40,67               |
| MEX     | -11,10             | 41,61               |
| NLD     | -6,49              | 40,82               |
| NOR     | -6,10              | 32,55               |
| PER     | -20,54             | 55,43               |
| PHL     | -15,14             | 58,33               |
| POL     | -6,56              | 40,53               |
| PRT     | -10,87             | 43,79               |
| ROU     | -7,04              | 44,54               |
| RUS     | -4,29              | 48,61               |
| SRB     | -4,59              | 40,73               |
| SGP     | -7,63              | 43,65               |
| SVK     | -10,39             | 40,44               |
| SVN     | -11,35             | 34,24               |
| ZAF     | -9,66              | 47,21               |
| ESP     | -14,65             | 42,21               |
| SWE     | -4,28              | 21,08               |
| CHE     | -6,16              | 37,10               |
| TWN     | -1,37              | 13,73               |
| THA     | -9,13              | 39,43               |
| TUR     | -5,42              | 42,28               |
| UKR     | -8,08              | 47,94               |
| GBR     | -12,91             | 38,99               |
| USA     | -6,44              | 43,14               |
| VNM     | -4,35              | 47,91               |
|---------+--------------------+---------------------|


#+BEGIN_SRC python :var df=IMF_fig_1() :results graphics file :file ./figs/IMF/GDP_Lockdown.png
df = pd.DataFrame(
    df,
)
df.set_index(0, inplace=True)
df = df.rename(columns=df.iloc[0]).drop("Country")
for col in df:
    df[col] = [x.replace(",", ".") for x in df[col]]
df = df.apply(pd.to_numeric, axis=1)


df["Country"] = df.index.to_list()
fig, ax = plt.subplots(figsize=(8, 5))
sns.regplot(data=df, y="GDP Forecast Error", x="Lockdown Stringency", ax=ax)
# ax.legend()
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")


def label_point(x, y, val, ax):
    a = pd.concat({"x": x, "y": y, "val": val}, axis=1)
    for i, point in a.iterrows():
        ax.text(point["x"] + 0.02, point["y"], str(point["val"]))


label_point(df["Lockdown Stringency"], df["GDP Forecast Error"], df["Country"], ax)
sns.despine()

fig.savefig(
    "./figs/IMF/" + "GDP_Lockdown" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/IMF/GDP_Lockdown.png]]



** Lockdown: Voluntary vs Stringency

#+NAME: Vol_String
#+CAPTION: Impact of Lockdowns and Voluntary Social Distancing on Mobility during the First 90 Days of Each Country‚Äôs Epidemic
| Country groups | Lockdown stringency | Voluntary social distancing |
|----------------+---------------------+-----------------------------|
| All            | -7,85               | -6,53                       |
| AEs            | -8,07               | -10,62                      |
| EMs            | -8,78               | -6,26                       |
| LICs           | -5,8                | -2,83                       |
|----------------+---------------------+-----------------------------|

#+BEGIN_SRC python :var df=Vol_String :results graphics file :file ./figs/IMF/Vol_String.png
df = pd.DataFrame(
    df,
)
# df = df.transpose()
df.set_index(0, inplace=True)
df.index.name = "Country Groups"
df = df.rename(columns=df.iloc[0]).drop("Country groups")
for col in df:
    df[col] = [x.replace(",", ".") for x in df[col]]
df = df.apply(pd.to_numeric, axis=1)


fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    kind="bar",
    stacked=True,
    ax=ax,
    # cmap="Set1",
    width=0.75,
    edgecolor="black",
)
ax.set_ylim(-25, 15)
ax.axhline(y=0, ls="-", color="black")
ax.legend()
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")


sns.despine()

fig.savefig(
    "./figs/IMF/" + "Vol_String" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/IMF/Vol_String.png]]

** Sequencing of lockdown measures
#+NAME: Lock_measure
#+CAPTION: Sequencing of lockdown measures
|--------------------------------+--------+-----+------|
| Lockdown measures              | Middle | Low | High |
|--------------------------------+--------+-----+------|
| Stay-at-home orders            |     18 |  10 |   27 |
| Public transport closures      |     16 | 7,5 |   25 |
| Internal movement restrictions |     16 |   7 |   27 |
| Workplace closures             |     13 |   6 |   22 |
| Gathering restrictions         |     10 |   2 |   20 |
| Public event cancellations     |      6 |   1 | 14,5 |
| School closures                |    4,5 |   1 | 13,5 |
| International travel controls  |      1 |   0 |    9 |
|--------------------------------+--------+-----+------|

#+BEGIN_SRC python :var df=Lock_measure() :results graphics file :file ./figs/IMF/Lock_measures.png
df = pd.DataFrame(
    df,
)
# df = df.transpose()
df.set_index(0, inplace=True)
df.index.name = "Lockdown measures"
df = df.rename(columns=df.iloc[0]).drop("Lockdown measures")
for col in df:
    df[col] = [str(x).replace(",", ".") for x in df[col]]
df = df.apply(pd.to_numeric, axis=1)
df = df.sort_values(by="Middle", ascending=True)
df.reset_index(inplace=True)
fig, ax = plt.subplots(figsize=(8, 5))
ax = sns.barplot(
    y="Lockdown measures",
    x="Middle",
    color="teal",
    # cmap="Set1",
    data=df,
    xerr=df["Low"],
    errcolor="black",
)

# df.plot(
#     kind = 'scatter',
#     y = "Lockdown measures",
#     x = "Low",
#     ax=ax,
#     color = 'black',
#     zorder=2
#     )

# df.plot(
#     kind = 'scatter',
#     y = "Lockdown measures",
#     x = "High",
#     ax=ax,
#     color = 'black',
#     zorder=2
#     )
ax.set_xlabel("Days")
ax2 = plt.axes([0.635, 0.635, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")


sns.despine()

fig.savefig(
    "./figs/IMF/" + "Lock_measures" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/IMF/Lock_measures.png]]

* OECD Weekly tracker

#+begin_src shell :dir ./raw/OECD/ :exports none :eval no
wget -q https://github.com/NicolasWoloszko/OECD-Weekly-Tracker/raw/main/Data/weekly_tracker.xlsx
#+end_src

#+begin_src python :results graphics file :file ./figs/Granulares/OCDE_Semanal.png
df = pd.read_excel("./raw/OECD/weekly_tracker.xlsx", parse_dates=True, index_col="date")
df = df[df["ISO3"] == "BRA"][["Tracker"]]["2019-01-01":]
df.index.name = ""
fig, ax = plt.subplots(figsize=(8, 5))
df.plot(
    title=f"Indicador Semanal - OCDE",
    ax=ax,
    lw=2.5,
    color="darkred",
)
ax.axvline(x=corona_sp, color="black", ls="--", lw=1, label="In√≠cio isolamento em SP")
ax.axhline(y=0, ls="-", lw=1.0, color="gray")
ax.legend(
    # loc="center left", bbox_to_anchor=(1, 0.5)
)
ax2 = plt.axes([0.135, 0.135, 0.2, 0.2])
ax2.imshow(logo, aspect="auto", zorder=0, alpha=0.5)
ax2.axis("off")

sns.despine()
fig.savefig(
    "./figs/Granulares/OCDE_Semanal" + ".png",
    dpi=300,
    bbox_inches="tight",
    pad_inches=0,
)
plt.close()
#+end_src

#+RESULTS:
[[file:./figs/Granulares/OCDE_Semanal.png]]

* Our world in data and stringency

** TODOs
*** TODO Unir os dataframes
*** TODO Plotar com diferencia√ß√£o de isolamento volunt√°rio ou imposto
**** Cores?

** Loading data :ignore:noexport:

*** Our world data

#+BEGIN_SRC python
df = pd.read_csv(
    "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv",
    index_col="date",
    parse_dates=True,
    usecols=[  # subseting
        "date",
        "iso_code",
        "continent",
        "new_cases_smoothed",
        "new_deaths_smoothed",
        "new_deaths_per_million",
        "new_cases_per_million",
        "new_cases_smoothed_per_million",
        "new_deaths_smoothed_per_million",
        "new_tests_smoothed_per_thousand",
        "people_fully_vaccinated",
        "new_vaccinations_smoothed_per_million",
        "stringency_index",
        "new_vaccinations_smoothed_per_million",
    ],
)
df[["stringency_index"]] = df[["stringency_index"]].shift(14)
df = df.groupby("iso_code").rolling(window=14).mean().reset_index().set_index("date")
df.to_csv("./clean/COVID/cases_deaths.csv")
#+END_SRC

#+RESULTS:
:results:
:end:

*** Stringency 


#+BEGIN_SRC python
df = pd.read_csv(
    "https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest.csv",
    index_col="Date",
    parse_dates=True,
    usecols=[  # subseting
        "Date",
        "CountryCode",
        "C1_School closing",
        "C1_Flag",
        "C2_Workplace closing",
        "C2_Flag",
        "C3_Cancel public events",
        "C3_Flag",
        "C4_Restrictions on gatherings",
        "C4_Flag",
        "C5_Close public transport",
        "C5_Flag",
        "C6_Stay at home requirements",
        "C6_Flag",
        "C7_Restrictions on internal movement",
        "C7_Flag",
        "C8_International travel controls",
    ],
)

closure = [
    "C1_School closing",
    "C2_Workplace closing",
    "C3_Cancel public events",
    "C4_Restrictions on gatherings",
    "C5_Close public transport",
    "C6_Stay at home requirements",
    "C7_Restrictions on internal movement",
    "C8_International travel controls",
]

flags = [
    "C1_Flag",
    "C2_Flag",
    "C3_Flag",
    "C4_Flag",
    "C5_Flag",
    "C6_Flag",
    "C7_Flag",
]

df["Closure"] = (
    df.reset_index().set_index("CountryCode")[closure].mean(axis="columns").values
)
# df = df[df["Closure"].diff() != 0]
df["Restrict"] = [i > 0 for i in df["Closure"].diff() > 0]
df = df[["CountryCode", "Closure", "Restrict"]].dropna()
df.columns = ["iso_code", "Closure", "Restrict"]
df.index.name = "date"  # for merging purposes
df.to_csv("./clean/COVID/closes.csv")
#+END_SRC

#+RESULTS:
:results:
:end:

*** Google mobility

#+BEGIN_SRC python
url = "https://www.gstatic.com/covid19/mobility/Global_Mobility_Report.csv"

cols = [
    "country_region",
    "sub_region_1",
    "sub_region_2",
    "metro_area",
    "iso_3166_2_code",
    "census_fips_code",
    "date",
    "retail_and_recreation_percent_change_from_baseline",
    "grocery_and_pharmacy_percent_change_from_baseline",
    "parks_percent_change_from_baseline",
    "transit_stations_percent_change_from_baseline",
    "workplaces_percent_change_from_baseline",
    "residential_percent_change_from_baseline",
]

df = pd.read_csv(
    url,
    usecols=cols,
    parse_dates=True,
    dtype={
        "country_region": str,
        "sub_region_1": str,
        "sub_region_2": str,
        "metro_area": str,
        "iso_3166_2_code": str,
        "census_fips_code": str,
        "date": str,
        "retail_and_recreation_percent_change_from_baseline": np.float64,
        "grocery_and_pharmacy_percent_change_from_baseline": np.float64,
        "parks_percent_change_from_baseline": np.float64,
        "transit_stations_percent_change_from_baseline": np.float64,
        "workplaces_percent_change_from_baseline": np.float64,
        "residential_percent_change_from_baseline": np.float64,
    },
)
# Convert date column to days of the year
# df['date'] = pd.to_datetime(df['date'], format="%Y/%m/%d", utc=True)


# Remove subnational data, keeping only country figures
filter_cols = [
    "sub_region_1",
    "sub_region_2",
    "metro_area",
    "iso_3166_2_code",
    "census_fips_code",
]
df = df[df[filter_cols].isna().all(1)]

# Delete columns
df = df.drop(
    [
        # "country_region",
        "sub_region_1",
        "sub_region_2",
        "metro_area",
        "census_fips_code",
        "iso_3166_2_code",
    ],
    axis="columns",
)


# Standardise country names to OWID country names
df = df.reset_index().set_index("country_region")
df.index = cc.convert(
    names=list(df.index), to="ISO3", not_found=None
)  # To avoid string problems
df = df.reset_index().set_index("date").drop("index", axis="columns")
# Converting the index as date
df.index = pd.to_datetime(df.index)
# Assign new column names
rename_dict = {
    "date": "Date",
    "level_0": "iso_code",
    "retail_and_recreation_percent_change_from_baseline": "Retail & Recreation",
    "grocery_and_pharmacy_percent_change_from_baseline": "Grocery & Pharmacy",
    "parks_percent_change_from_baseline": "Parks",
    "transit_stations_percent_change_from_baseline": "Transit Stations",
    "workplaces_percent_change_from_baseline": "Workplaces",
    "residential_percent_change_from_baseline": "Residential",
}

# Rename columns
df = df.rename(columns=rename_dict)
df["Isolamento"] = df["Residential"].pct_change(7)
df.to_csv("./clean/COVID/google_mobility.csv")
#+END_SRC

** Merging :noexport:


#+begin_src R
df <-read_csv(
  './clean/COVID/cases_deaths.csv',
  guess_max = 3000
)  %>% arrange(iso_code)

tmp <- read_csv(
  './clean/COVID/closes.csv'
)  %>% arrange(iso_code)
df <- df %>% left_join(tmp)
# check if full_join or right or left join
tmp <- read_csv(
  './clean/COVID/google_mobility.csv'
)  %>% arrange(iso_code)
df <- df %>% left_join(tmp)
df <- df %>%
  mutate(Policy_change = c(NA, diff(Closure))) %>%
  mutate(Restrict = Policy_change > 0) %>%
  mutate(stayhome_growth = (Residential/lag(Residential) - 1) * 100) %>%
  mutate(stayhome_growth_7 = (Residential/lag(Residential,7) - 1) * 100) %>%
  mutate(Isolamento = case_when(
     stayhome_growth_7 > 0 & Restrict == TRUE ~ "Imposto", # Queda da mobilidade junto da imposi√ß√£o
     stayhome_growth_7 > 0 & Restrict == FALSE ~ "Volunt√°rio", # Queda da mobilidade sem restri√ß√£o
     stayhome_growth_7 <= 0 ~ "Queda",
           )) %>%
  mutate(Isolamento = as.factor(Isolamento)) %>%
  mutate(cases_growth = (new_cases_per_million/lag(new_cases_per_million) - 1) * 100) %>%
  mutate(deaths_growth = (new_deaths_per_million/lag(new_deaths_per_million) - 1) * 100) %>%
  mutate(vaccine_growth = (people_fully_vaccinated/lag(people_fully_vaccinated) - 1) * 100) %>%
  distinct(date, iso_code, .keep_all = TRUE)

write.csv(
  df,
  './clean/COVID/cases_closes_google_merged.csv',
  row.names = FALSE
)
#+end_src

#+RESULTS:
:results:

[36m‚îÄ‚îÄ[39m [1m[1mColumn specification[1m[22m [36m‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[39m
cols(
  date = [34mcol_date(format = "")[39m,
  iso_code = [31mcol_character()[39m,
  new_cases_smoothed = [32mcol_double()[39m,
  new_deaths_smoothed = [32mcol_double()[39m,
  new_cases_per_million = [32mcol_double()[39m,
  new_cases_smoothed_per_million = [32mcol_double()[39m,
  new_deaths_per_million = [32mcol_double()[39m,
  new_deaths_smoothed_per_million = [32mcol_double()[39m,
  new_tests_smoothed_per_thousand = [32mcol_double()[39m,
  people_fully_vaccinated = [32mcol_double()[39m,
  new_vaccinations_smoothed_per_million = [32mcol_double()[39m,
  stringency_index = [32mcol_double()[39m
)

|======                                                                                                                                                   | 4%|========                                                                                                                                                 | 5%|==========                                                                                                                                               | 6%|============                                                                                                                                             | 7%|==============                                                                                                                                           | 9%|===============                                                                                                                                    | 10% 1 MB|================                                                                                                                                   | 11% 1 MB|==================                                                                                                                                 | 12% 1 MB|====================                                                                                                                               | 13% 1 MB|=====================                                                                                                                              | 14% 1 MB|=======================                                                                                                                            | 15% 1 MB|=========================                                                                                                                          | 16% 1 MB|==========================                                                                                                                         | 18% 1 MB|============================                                                                                                                       | 19% 1 MB|==============================                                                                                                                     | 20% 2 MB|===============================                                                                                                                    | 21% 2 MB|=================================                                                                                                                  | 22% 2 MB|===================================                                                                                                                | 23% 2 MB|====================================                                                                                                               | 24% 2 MB|======================================                                                                                                             | 26% 2 MB|========================================                                                                                                           | 27% 2 MB|==========================================                                                                                                         | 28% 2 MB|===========================================                                                                                                        | 29% 2 MB|=============================================                                                                                                      | 30% 3 MB|===============================================                                                                                                    | 31% 3 MB|================================================                                                                                                   | 32% 3 MB|==================================================                                                                                                 | 34% 3 MB|====================================================                                                                                               | 35% 3 MB|=====================================================                                                                                              | 36% 3 MB|======================================================                                                                                             | 37% 3 MB|========================================================                                                                                           | 38% 3 MB|==========================================================                                                                                         | 39% 3 MB|============================================================                                                                                       | 40% 4 MB|==============================================================                                                                                     | 42% 4 MB|================================================================                                                                                   | 43% 4 MB|=================================================================                                                                                  | 44% 4 MB|===================================================================                                                                                | 45% 4 MB|=====================================================================                                                                              | 46% 4 MB|======================================================================                                                                             | 47% 4 MB|========================================================================                                                                           | 48% 4 MB|=========================================================================                                                                          | 49% 5 MB|===========================================================================                                                                        | 50% 5 MB|=============================================================================                                                                      | 52% 5 MB|==============================================================================                                                                     | 53% 5 MB|================================================================================                                                                   | 54% 5 MB|==================================================================================                                                                 | 55% 5 MB|====================================================================================                                                               | 56% 5 MB|=====================================================================================                                                              | 57% 5 MB|=======================================================================================                                                            | 58% 5 MB|========================================================================================                                                           | 60% 6 MB|==========================================================================================                                                         | 61% 6 MB|============================================================================================                                                       | 62% 6 MB|=============================================================================================                                                      | 63% 6 MB|===============================================================================================                                                    | 64% 6 MB|=================================================================================================                                                  | 65% 6 MB|===================================================================================================                                                | 67% 6 MB|====================================================================================================                                               | 68% 6 MB|======================================================================================================                                             | 69% 6 MB|=======================================================================================================                                            | 70% 7 MB|=========================================================================================================                                          | 71% 7 MB|==========================================================================================================                                         | 72% 7 MB|============================================================================================================                                       | 73% 7 MB|==============================================================================================================                                     | 74% 7 MB|===============================================================================================================                                    | 75% 7 MB|=================================================================================================================                                  | 76% 7 MB|===================================================================================================================                                | 78% 7 MB|=====================================================================================================================                              | 79% 7 MB|=======================================================================================================================                            | 80% 8 MB|========================================================================================================================                           | 81% 8 MB|==========================================================================================================================                         | 82% 8 MB|============================================================================================================================                       | 83% 8 MB|=============================================================================================================================                      | 84% 8 MB|===============================================================================================================================                    | 86% 8 MB|=================================================================================================================================                  | 87% 8 MB|==================================================================================================================================                 | 88% 8 MB|====================================================================================================================================               | 89% 8 MB|======================================================================================================================================             | 90% 9 MB|=======================================================================================================================================            | 91% 9 MB|=========================================================================================================================================          | 92% 9 MB|==========================================================================================================================================         | 93% 9 MB|============================================================================================================================================       | 95% 9 MB|==============================================================================================================================================     | 96% 9 MB|===============================================================================================================================================    | 96% 9 MB|================================================================================================================================================   | 97% 9 MB|================================================================================================================================================== | 98% 9 MB|==================================================================================================================================================| 100% 10 MB

[36m‚îÄ‚îÄ[39m [1m[1mColumn specification[1m[22m [36m‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[39m
cols(
  date = [34mcol_date(format = "")[39m,
  iso_code = [31mcol_character()[39m,
  Closure = [32mcol_double()[39m,
  Restrict = [33mcol_logical()[39m
)
Joining, by = c("date", "iso_code")

[36m‚îÄ‚îÄ[39m [1m[1mColumn specification[1m[22m [36m‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[39m
cols(
  date = [34mcol_date(format = "")[39m,
  iso_code = [31mcol_character()[39m,
  `Retail & Recreation` = [32mcol_double()[39m,
  `Grocery & Pharmacy` = [32mcol_double()[39m,
  Parks = [32mcol_double()[39m,
  `Transit Stations` = [32mcol_double()[39m,
  Workplaces = [32mcol_double()[39m,
  Residential = [32mcol_double()[39m,
  Isolamento = [32mcol_double()[39m
)
Joining, by = c("date", "iso_code")
:end:

** Ploting stringency vs cases and voluntary :ignore:

#+begin_src R

df <-read_csv(
  './clean/COVID/cases_closes_google_merged.csv',
  guess_max = 3000
) %>%
  mutate(Isolamento = as.factor(Isolamento)) %>%
  mutate(iso_code = as.factor(iso_code)) %>%
  ## filter(Policy_change != 0) %>%
  select(date,
         iso_code,
         new_cases_per_million,
         cases_growth,
         deaths_growth,
         vaccine_growth,
         Policy_change,
         Restrict,
         Isolamento,
         Residential,
         Closure,
         stayhome_growth,
         stayhome_growth_7,
         vaccine_growth
         ) %>%
  mutate(cases_growth_after14 = lead(cases_growth, 14))

print(head(df))
df %>% drop_na(Isolamento) %>% filter(date > as.Date("2020-06-01")) %>% filter(cases_growth_after14 < 100,cases_growth_after14>-50, stayhome_growth_7<100, Isolamento != "Queda", Policy_change !=0) %>% ggplot(aes(x=stayhome_growth_7, y= cases_growth_after14)) + geom_point() + facet_wrap(~Isolamento)
#+end_src

#+RESULTS:
:results:

[36m‚îÄ‚îÄ[39m [1m[1mColumn specification[1m[22m [36m‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ[39m
cols(
  .default = col_double(),
  date = [34mcol_date(format = "")[39m,
  iso_code = [31mcol_character()[39m,
  Restrict = [33mcol_logical()[39m,
  Isolamento = [31mcol_character()[39m
)
[36m‚Ñπ[39m Use [30m[47m[30m[47m`spec()`[47m[30m[49m[39m for the full column specifications.
[90m# A tibble: 6 x 14[39m
  date       iso_code new_cases_per_m‚Ä¶ cases_growth deaths_growth vaccine_growth Policy_change Restrict Isolamento Residential Closure stayhome_growth
  [3m[90m<date>[39m[23m     [3m[90m<fct>[39m[23m               [3m[90m<dbl>[39m[23m        [3m[90m<dbl>[39m[23m         [3m[90m<dbl>[39m[23m          [3m[90m<dbl>[39m[23m         [3m[90m<dbl>[39m[23m [3m[90m<lgl>[39m[23m    [3m[90m<fct>[39m[23m            [3m[90m<dbl>[39m[23m   [3m[90m<dbl>[39m[23m           [3m[90m<dbl>[39m[23m
[90m1[39m 2020-02-24 AFG                    [31mNA[39m           [31mNA[39m            [31mNA[39m             [31mNA[39m            [31mNA[39m [31mNA[39m       [31mNA[39m                   0   0.375              [31mNA[39m
[90m2[39m 2020-02-25 AFG                    [31mNA[39m           [31mNA[39m            [31mNA[39m             [31mNA[39m             0 FALSE    [31mNA[39m                   0   0.375              [31mNA[39m
[90m3[39m 2020-02-26 AFG                    [31mNA[39m           [31mNA[39m            [31mNA[39m             [31mNA[39m             0 FALSE    [31mNA[39m                   1   0.375             [31mInf[39m
[90m4[39m 2020-02-27 AFG                    [31mNA[39m           [31mNA[39m            [31mNA[39m             [31mNA[39m             0 FALSE    [31mNA[39m                   2   0.375             100
[90m5[39m 2020-02-28 AFG                    [31mNA[39m           [31mNA[39m            [31mNA[39m             [31mNA[39m             0 FALSE    [31mNA[39m                   2   0.375               0
[90m6[39m 2020-02-29 AFG                    [31mNA[39m           [31mNA[39m            [31mNA[39m             [31mNA[39m             0 FALSE    [31mNA[39m                   1   0.375             -[31m50[39m
[90m# ‚Ä¶ with 2 more variables: stayhome_growth_7 [3m[90m<dbl>[90m[23m, cases_growth_after14 [3m[90m<dbl>[90m[23m[39m
:end:
